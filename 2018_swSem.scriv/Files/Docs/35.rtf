{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 CourierNewPSMT;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\fet2\ftnbj\aenddoc
\pgnrestart\pgnstarts0
\pard\plain \ri-17683\ql\ltrch\loch {\f0\fs24\b0\i0 We have founded our work on the discipline of semiotics and concluded genuine semantics cannot exist in current software. This comes very close to the debate that followed Searle\loch\af0\hich\af0\dbch\af0\uc1\u8217\'92s Chinese room experiment [@Searle:1980hw] on the (im)possibility for computers to think and understand. We do not intend to partake in this debate but assume the position taken and investigate its consequences. The outcome of our investigation, viz. the 5 \\cref\{dp:semiotic-pragmatic,dp:comprehension-behaviour,dp:reciprocity,dp:atomicity,dp:semantic-coherence\}, particularly the reciprocity principle, are applied to software architecture. The results are laying in front of you.}
\par\pard\plain \ri-17683\ltrch\loch {\f0\fs24\b0\i0  }
\par\pard\plain \ri-17683\ql\ltrch\loch {\f0\fs24\b0\i0 We do not claim to have solved the symbol grounding problem and nor did we intend to. Once the premise that semantics cannot exist in software is assumed, such becomes out-of-scope. With the subsequent conclusion that the reciprocity between data and data processing is the next best thing towards semantics, we show that \\cref\{def:token-grounding,def:model-grounding\} on token and model grounding suffice for establishing the reduced form of grounding as specified in \\cref\{dp:semantic-grounding\}. Although the token-based machine that contemporary software represents is denied genuine semantics, the principles do consolidate a consistent and coherent representation of semantic and pragmatic meaning into a single distinct, tangible and computational artefact. Our proposal for a semantic viewpoint and view that follow those principles, provides practical guidance towards engineering semantic services from which, eventually, semantic standards can emerge that allow for their embedding into the infrastructure, the approach that is the fundamental instrument to the continuous, stable growth of ICT in the last 6 decades.}
\par\pard\plain \ri-17683\ltrch\loch {\f0\fs24\b0\i0  }
\par\pard\plain \ri-17683\ql\ltrch\loch {\f0\fs24\b0\i0 \\Cref\{dp:comprehension-behaviour\} calls for a clear boundary between behaviour and comprehension. This boundary has not been fully characterised, yet. More research is required to establish a proper principled approach, but impediments nor conflicts seem to emerge with its underdeveloped \\cref\{heur:how-to-discern\}.}
\par\pard\plain \ri-17683\ltrch\loch {\f0\fs24\b0\i0                }
\par\plain {\f0\fs24\b0\i0 We consider semantics a concern shared by many stakeholders and therefore significant for understanding their commonalities as well as their differences. Consequently, its distribution over all interpretations of all symbolic models breaks the principles of separation of concerns, coherence and consistency. We argue that the focus for semantics should be the domain of application and that the resulting domain model represents the grounding for all other models of the system. The underlying concern is the ability to communicate about the domain of application, plus the appropriateness of the system artefacts to represent the domain accurately, and the internal consistency with which the architecture addresses the various stakeholder concerns that have something in common indeed: the domain of application. The main principles in support of this argument are  \\cref\{dp:language-appropriateness,dp:domain-faithfulness\}.}
\par\plain \f0\fs24\b0\i0
\par\pard\plain \ri-17683\ql\ltrch\loch {\f0\fs24\b0\i0 We consider the three distinct facets of the semantic service a necessary condition for the semantic component. It remains unclear whether their inclusion is a sufficient condition as well, and is subject to further investigations and experiences.}
\par\pard\plain \ri-17683\ltrch\loch \f0\fs24\b0\i0
\par\pard\plain \ri-17683\ql\ltrch\loch {\f0\fs24\b0\i0 The notion on semantic coherence can be seen in object-orientation (OO) as well, where the class is a construct similar to a semantic monolith. OO indeed enforces reciprocity between data and data operations. However, as a model OO can only provide an informal \loch\af0\hich\af0\dbch\af0\uc1\u8220\'93representation\u8221\'94 relation with reality as depicted in \\cref\{fig:software-models-reality\} due to the absence of a formal underlying framework and, henceforth, absence of a formal DoI. OO facilitates maintaining coherence, but cannot represent semantics explicitly.}
\par\pard\plain \ri-17683\ltrch\loch \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 In Domain-Driven Design (DDD) [@Evans2003] the notion of Domain Model is the pillar of software development: the implementation is directly connected to a model of the core business concepts. It is valuable when addressing complex business needs. Being an approach, however, it does not provide an actual method or tool to apply the design practices. MDE/MDA also emphasizes the importance of the domain model: in MDA, the Computer Independent Model (CIM) is the first model to design in the chain of transformation (from platform independence to platform specificities); MDE [@Bezivin2006] generalises the MDA approach, with coexisting models describing the system from multiple concerns. Although acknowledging the importance of the Domain Model, they neither elaborate on the domain model is, nor its design principles. Our proposal contributes to model-driven approaches with a clear definition of the semantic view and the principles associated with its governing viewpoint.}
\par\plain {\f0\fs24\b0\i0   }
\par\pard\plain \ri-17683\ql\ltrch\loch {\f0\fs24\b0\i0 Based on this work we will investigate its consequences in semantic interoperability and establish how that can be consolidated into contemporary software architectures. Other relevant investigations regard elaborating the principles into a concrete semantic viewpoint; and positioning the Event-Control-Action pattern [@Costa2005] on the border between the Domain Model and the system\loch\af0\hich\af0\dbch\af0\uc1\u8217\'92s behavioural models.}
\par\pard\plain \ri-16872\ql\ltrch\loch \f0\fs24\b0\i0
\par\pard\plain \ri-17683\ltrch\loch {\f0\fs24\b0\i0 We have introduced 3 concerns addressing semantics in software. The *semiotic and pragmatic concern* concludes that in software, semantics is reduced to the reciprocity between data and software code: the Atomic Semantic Monolith (ASM); we have introduced 5 design principles to its effect. The *domain appropriateness concern* establishes that a modelling language itself already contributes to semantics; we have identified 2 design principles that emerge a Domain Model. Finally, the *architectural consistency concern* addresses how the software agent applies the Domain Model to reflect the state of affairs in reality as well as its particular knowledge rules that apply. We have identified 2 design principles to maintain its loosely coupled -and consistent- use by the System Model. We have validated these concerns and design principles by showing how they commit to the requirements that are established by ISO42010\loch\af0\hich\af0\dbch\af0\uc1\u8217\'92s architectural viewpoint and view. We consider the 3 concerns and 9 design principles the necessary and sufficient conditions to consolidate semantics in contemporary software architecture. We are confident that they contribute to the scientific consensus on semantics in software that is necessary to their abstraction as semantic services into the infrastructure.}
\par\plain {\f0\fs24\b0\i0            }
\par\plain \f0\fs24\b0\i0}