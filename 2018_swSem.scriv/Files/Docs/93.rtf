{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 CourierNewPSMT;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\fet2\ftnbj\aenddoc
\pgnrestart\pgnstarts0
\pard\plain \ltrch\loch {\f0\fs24\b0\i0 Architecting a software system is an engineering process integrated within the software lifecycle processes, as described in the international standard ISO/IEC/IEEE 12207:2017^[https://www.iso.org/standard/43447.html]. When architecting a software system, the architect makes the main technical decisions about how the business goals  will be realized with software elements. The outcome of this activity is the architecture of the system, defined as the \loch\af0\hich\af0\dbch\af0\uc1\u8220\'93fundamental concepts or properties of a system in its environment embodied in its elements, relationships, and in the principles of its design and evolution\u8221\'94. The architecture of the system is an abstraction of the system under analysis, and it is expressed via the architecture description, an artefact used by architects and other stakeholders to understand the design decisions, trace them back to the goals, and as blueprint for planning and construction.}
\par\plain {\f0\fs24\b0\i0  }
\par\plain {\f0\fs24\b0\i0 The drivers in the decision making process are the expected qualities of the system, either specifically required by the stakeholders, or  commonly accepted by the practitioners. Standard catalogues of those system qualities exist, such as the ISO2500 family of standard^[https://www.iso.org/standard/64764.html], which not only defines a taxonomy of qualities but also the processes to specify and evaluate them all along the software development life-cycle. They are also referred to as the quality attributes, or the -ilities of the system, and encompass: interoperability, scalability, availability, performance, usability, security, and many more [Software Architecture in Practice, 3rd Edition]. Architecture patterns are usually applied to meet the quality requirements: a pattern is a coded solution to a given problem in a specific context. Patterns in architecture can be an answer to very generic problems (layered architecture to manage dependencies amongst components, service oriented architecture to maximise coherence and minimise coupling), but also to more specific problems (enterprise integration patterns are solutions to technical interoperability amongst various systems). Architecting a software system is therefore a process driven by the need to build software exhibiting specific qualities, and having as outcome the architecture description of the system. This artefact is the result of applying the best practices in the art of software engineering, and describes \loch\af0\hich\af0\dbch\af0\uc1\u8220\'93the fundamental structure of a software system\u8221\'94 exhibiting the qualities expected by the system.}
\par\plain {\f0\fs24\b0\i0  }
\par\plain {\f0\fs24\b0\i0 Historically, the process of architecture design has been addressed in many ways, either surfing on the various waves in software engineering, or applying the paradigm of each software development method and approach. It quite often ended up addressing specific concerns of the system at the detriment of the others: functional decomposition, aspect-oriented programming and business process management approaches focus on the function of the system; use case and scenario-driven approaches focus on the actors of the system; data-driven paradigm focuses on the information managed by the system. }
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0}