{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 CourierNewPSMT;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\fet2\ftnbj\aenddoc
\pgnrestart\pgnstarts0
\pard\plain \ri-16872\ql\ltrch\loch {\f0\fs24\b0\i0 Semantics in software shall provide for a tangible, computational and distinct artifact as an explicit *frame of reference* in support of the internal workings of the agent itself: an explicit set of ideas or facts that the agent accepts and that influences the agent\loch\af0\hich\af0\dbch\af0\uc1\u8217\'92s behaviour, its decisions. To that end, we first summarise an important principle of semiotics, viz. the semiotic triangle, and subsequently introduce the necessary elements of pragmatics, viz. context and inference. Based on this we can explain the limits of semantics in the realm of software, show the emergence of a semantic monolith, and derive their architectural consequences for software semantics.}}