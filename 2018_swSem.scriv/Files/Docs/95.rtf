{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 CourierNewPSMT;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\fet2\ftnbj\aenddoc
\pgnrestart\pgnstarts0
\pard\plain \ri-17053\ltrch\loch {\f0\fs24\b0\i0 Although none of the modelling conventions are actually prescribed by the standard, a view is an engineering artifact and therefore has to be designed according to the best practises. Specifically, the fundamental principles of design in software engineering have to be applied, i.e. separation of concerns, high cohesion and low coupling [@Stevens1974;@Parnas1972;@Henderson-Sellers1996].}
\par\plain {\f0\fs24\b0\i0  }
\par\plain {\f0\fs24\b0\i0 A multi-view approach enables the separation of concerns by design and each view expresses the architecture of the system of interest from the perspective of identified stakeholders, to address a set of specific concerns. To assess the Domain Model as an architecture view of the system, the first step is to identify the stakeholders that have an interest in that view, and the concerns that the view addresses. The definition of the Domain Model specifies that the main concern addressed by the view is the representation of the real world meaning in the system's concepts - the semantics of the system. The architecture view is thus named the *semantic view*.}
\par\plain {\f0\fs24\b0\i0  }
\par\plain {\f0\fs24\b0\i0 To identify the stakeholders benefiting from the semantic view, we use the key software architecture stakeholder roles [@Smolander2002] and asses their interest in the semantic description of the system. The *architect* (creating the architecture, and thus the semantic view), and the *designer* (implementing the software according to the architecture) are the first candidates. The main benefit they get from the semantic view is to bridge the usual gap between reality and software system: Business-IT Alignment. The *project manager* (specifying the scope of the project) has also interest in the semantic view: whether he applies a classical or agile approach, the semantic view ensures that the work breakdown structure of the project is coherently defined, so no semantic modules are broken into parts. Finally, the semantic view also benefits the C-level in charge of the strategic IT decisions and responsible for the enterprise application landscape - the CIO. As the Domain Model doesn\loch\af0\hich\af0\dbch\af0\uc1\u8217\'92t change as swift as technology, it is a stable baseline for the development of the IT strategy. The Domain Model as the semantic view of the system is therefore at the cross-roads of the major stakeholders' concerns of the organisation: business and IT, strategy, and operations.}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Separation of concerns is also relevant in the internal design of each view. Considering the three architectural aspects of the system (active, behaviour and passive structures) can separate the concerns also from a semantic perspective. \\Cref\{dp:comprehension-behaviour\} acknowledges that both the structure (semantic meaning) and the behaviour (pragmatic meaning) are equally important in the Domain Model, and ensures that both concerns are *addressed* as well as *separated* in the semantic view. Moreover, \\cref\{dp:comprehension-behaviour\} enforces that the Domain Model includes not only the elements of the passive structure (information and data objects), but also the behaviour (rules and processes) acting on the passive structure for each element of the active structure (the actors of the system), therefore also contributing to high-cohesion in the Domain Model. \\Cref\{dp:reciprocity\} (reciprocity) enforces that both data and data processing are considered together, and \\cref\{dp:semantic-coherence\} (semantic coherence) establishes rules on how to guarantee that high cohesion is maintained within the Domain Model. The atomicity principle (\\cref\{dp:atomicity\}) edicts the scope of the Domain Model to be delimited by what is required to be represented in terms of structural and behavioural elements from the domain of application. It therefore contributes both to the high cohesion and low coupling principles, enabling the modularity grounded on semantic atomicity.}
\par\plain {\f0\fs24\b0\i0  }
\par\plain {\f0\fs24\b0\i0 The fundamental design principles of separation of concerns, high cohesion and low coupling, as applied from a semantic perspective, give the Domain Model the required properties of an architecture view of the system. However, we need to confirm that a viewpoint exists that governs this view, i.e., that there is a set of conventions for constructing, interpreting, using and analysing the semantics view. The design principles will support in this, too.}
\par\plain {\f0\fs24\b0\i0  }
\par\plain {\f0\fs24\b0\i0 Let's first acknowledge that ADLs such as ArchiMate only partially support the semantic viewpoint: they provide the required construct to identify the data (passive structure), the data processing (behaviour), and the agent (active structure) assigned to the behaviour. However, the language constructs (business and data objects, function and process, actor and role) are not rich enough to specify the structural and behavioural aspects of the domain model accurately. They are somehow placeholders for the further specifications of those aspects with a dedicated modelling language. It is quite common for ADLs as higher level modelling language to be complemented with lower-level language.}
\par\plain {\f0\fs24\b0\i0  }
\par\plain {\f0\fs24\b0\i0 We state that the Domain Model and the associated design principles provide the required Model Kind, language and notation, modelling method and analytic technique, making it the foundation to the specifications of the semantic viewpoint. This governing viewpoint of the semantic view complements the higher-level language such as ArchiMate, enabling it to address the semantic concerns, as follows:}
\par\plain {\f0\fs24\b0\i0  }
\par\plain {\f0\fs24\b0\i0 * \\Cref\{dp:domain-faithfulness\} implies there are modelling conventions that enable the faithful representation of the semantics associated with the DoA. According to the standard, this is the definition of a Model Kind, and that design principle therefore implicitly acknowledges that a Model Kind exists that guides the design of the models pertaining to the semantics view. The Model Kind is addressed in \\cref\{the-nature-of-models\}, indicating that the Domain Model addresses understanding of the DoA, and is a backward-looking model; }
\par\plain {\f0\fs24\b0\i0 * \\Cref\{dp:language-appropriateness\}) brings ontological commitment as the foundation for a modelling language and notation associated with this set of modelling conventions. It is the foundation for a language specification dedicated to the design of models belonging to the semantic view;}
\par\plain {\f0\fs24\b0\i0 * By enforcing the services that the Domain Model should provide, \\cref\{dp:three-faceted-services\} supports the definition of both modelling approach/method and analytic technique. It introduces rules relevant for designing the models belonging to the semantic view: the interface with the data through the CRUD services, as well as services that consider and apply the knowledge that the end user expects the software agent to master in accordance to the particular domain perspective. Moreover, the discipline of ontology engineering (that the Domain Model relies upon) provides the required techniques and approaches to design the Domain Model and to inspect and analyse it.}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Therefore, the collective design principles are the basis to define all elements of the semantic viewpoint: model kind, modelling language and notation, as well as modelling method and analytic technique.}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Relations between architectural views, denoted *correspondence* by ISO42010, are essential for consolidating architectural consistency [@Bouck2008]. \\Cref\{def:model-grounding,def:token-grounding\} formalise the *correspondence rules*, enforcing and governing the fundamental semantic characteristic of correspondences between the semantic view and those from the System Model. }
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 We conclude that the design principles collectively represent the foundational rules to define both the semantics view and its governing viewpoint in accordance with the definition of the standard of architecture description. The view itself is materialised by the Domain Model and consolidates the semantic concerns of the system\loch\af0\hich\af0\dbch\af0\uc1\u8217\'92s stakeholders. The governing viewpoint specifies the rules to describe the semantic view through the application of the design principles. }
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0}