{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 CourierNewPSMT;}{\f1\fmodern\fcharset0\fprq2 CourierNewPS-ItalicMT;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\fet2\ftnbj\aenddoc
\pgnrestart\pgnstarts0
\pard\plain \ltrch\loch {\f0\fs24\b0\i0 Never before, data were so ubiquitous, and managed access to external data was so easy. Because current ICT is unable to *use* all that same external, non-native data as access-and-play service, agility in business collaboration is hampered in all domains. For instance, consider the following (allegedly real) }{\field{\*\fldinst HYPERLINK "scrivcmt://83BE3DB1-45BA-45F1-8E7E-DB804CC0B390"}{\fldrslt\f0\fs24\b0\i0 example of an interoperability failure.}}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 > A}{\f0\fs24\b0\i0\cf1  German steel producer upgraded its industrial process robot. Since the majority of the steel production process is dependent on time, }{\f0\fs24\b0\i0 from a security point of view }{\f0\fs24\b0\i0\cf1 the decision was made to not rely on their own internal clocks but }{\f0\fs24\b0\i0 to use the German *Braunschweig Funkuhr* time radio signal as source for the exact time }{\f0\fs24\b0\i0\cf1 instead}{\f0\fs24\b0\i0 .}{\f0\fs24\b0\i0\cf1  }{\f0\fs24\b0\i0 At the end of April 1993, when Germany went on summer time, the }{\f0\fs24\b0\i0\cf1 computer clock of the steel producer}{\f0\fs24\b0\i0  went from 1:59 AM to 3:00 AM in one minute. This resulted in a production line allowing molten ingots to cool for one hour less than normal. When the process controller thought the cooling time had expired, his actions splattered still-molten steel, damaging part of the }{\field{\*\fldinst HYPERLINK "scrivcmt://A8AB84D2-8C28-4923-8516-C57012DCFBB7"}{\fldrslt\f0\fs24\b0\i0 facility.}}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 In this simple example a tiny difference in the meaning of `time` between the steel producer and the national time provider hampered interoperability to the extend of damaging the steel facility. This tiny difference rooted in the assumption by the steel producer that `time` expressed a continuous scale whilst for the Braunschweig Funkuhr, `time` denoted instant clock time for that time zone and therefore represented a non-continuous scale. In order to achieve that both collaborators, here the Braunschweig Funkuhr and the steel producer, can actually *use* their peers data, the need exists to design and implement wrappers that remove any inconsistency between the variations that may occur in terms, structures, dimensions and what have you. Many such variations exist, leading to a range of failures in so-called *semantic interoperability* (sIOP) and }{\field{\*\fldinst HYPERLINK "scrivcmt://EC830657-929F-4399-8C1E-87D4B39CEC87"}{\fldrslt\f0\fs24\b0\i0 Section/Appendix ##}}{\f0\fs24\b0\i0  provides for a short overview of sIOP-faults. Unfortunately, it is fundamentally impossible to automate the production of wrappers, because we need a genuine *understanding* upfront, which computers still cannot do.}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 The most disconcerting consequences of a lack of (automated) sIOP are time-to-deliver, flat interoperability failures, and even seemingly correct but quite invalid data analysis probably leading to faulty system behaviour. Current sIOP implementations are essentially based on the (time-consuming) process of establishing a (local) convention on the semantics of the terms that are exchanged during collaboration, requiring custom solutions and collaboration-dependent software adaptations. Such conventions can be considered a semantic monolith, which makes dealing with data outside the monolith impossible, unless again a time consuming (months) semantic adoption process is applied. Moreover, these semantic conventions consider semantic heterogeneity as a bug instead of a feature necessary to achieve semantic accuracy. But still, this conventions-based approach towards sIOP is accepted folklore in ICT. In view of the large uptake of the Internet, the Internet of Things (IoT), cloud computing and big data, and in view of economical pressure to intensify enterprise collaboration, we consider this approach "too little, too late". Some form of automation is required to resolve these issues, and we place artificial intelligence (AI) at its core. With the separation [coined by @Searle:1980hw] between }{\f1\fs24\b0\i1 strong}{\f0\fs24\b0\i0  AI (a system that can *think* and has a *mind*, in the philosophical definition of the term) or }{\f1\fs24\b0\i1 weak}{\f0\fs24\b0\i0  AI (a system that can only *act* like it thinks and has a mind), we take the position that --unfortunately-- strong AI is not yet available, if ever [@XiuquanLi2017]. We therefore make do with weak AI and show that despite its limitations it still has got a fundamental role to fulfil as carrier for semantics and sIOP, both facilitating the required automation. Weak AI, despite its current applications in Semantic Web or ontologies, has not yet been embedded in contemporary software architectural paradigms.  }
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 In comparison, scalability was a big architectural concern in the past, requiring custom solutions as well. In response to this concern, scalability was standardised in the form of architectural patterns, and finally totally embedded and hidden into the infrastructure. Similarly, sIOP can be considered the architectural concern of this decade. We first need to provide a standardised solution pattern to address semantic concerns before we can embed it in a technological infrastructure. Only then we can claim that sIOP becomes transparent to the developer and that the semantic monolith is taken down. Where scalability resulted in a huge increase in performance-demanding applications against a fraction of the original costs and effort, business agility will emerge once the semantic monolith is removed and semantic services exist at the infrastructural level. Then sIOP becomes an access-and-play operation that can be achieved with data not anticipated for during software design in due time, at any point in their life cycle. Metaphorically speaking, we consider sIOP as a }{\f1\fs24\b0\i1 bridge}{\f0\fs24\b0\i0  overarching a (semantic) gap: with *bridgeheads* (semantic concerns) on each side of the gap, with a *spanning* (semantic aligments) resting on them to structurally support the bridge and its traffic, and with a *roadway* (data mediation) enabling the crossing of the traffic. Finally, architectural *principles* provide the necessary guidance to the architect for the various design decisions that effectively result in a particular bridge over a particular (semantic) gap. Our contributions to consolidating semantic interoperability in software architectures are fivefold, and represented as architectural principles and concerns, as follows:}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 * }{\f1\fs24\b0\i1 Semantic concerns (bridgehead)}{\f0\fs24\b0\i0 : Abstracting semantics from a tacit software implication into a tangible, computational and distinct artifact provides us with the potential to connect to it and to make comparisons with the semantic artifact of the peer software agent. Based on the discipline of semiotics, we explain why semantics are irrelevant to software. Instead, we should focus on the reciprocity between data and the data processing code of software. This explains, too, the shortcomings of the current approach towards software semantics that rely on prescriptive information models. We argument that the application of ontologies and ontological commitment are fundamental to remedy current semantic shortcomings (\\cref\{bridgehead-semantics\});}
\par\plain {\f0\fs24\b0\i0 * }{\f1\fs24\b0\i1 Weak AI concerns (spanning)}{\f0\fs24\b0\i0 : Since \loch\af0\hich\af0\dbch\af0\uc1\u8220\'93strong AI\u8221\'94 does not yet exist, sIOP remains in demand of human intervention in order to reconcile the semantic differences between collaborating software agents. However, human intervention is time consuming. We reduce the necessary human intervention to complement weak AI to a task that suffices to achieve sIOP, viz. authoring semantic alignments only (\\cref\{spanning-alignments\});}
\par\plain {\f0\fs24\b0\i0 * }{\f1\fs24\b0\i1 Mediation concerns (roadway)}{\f0\fs24\b0\i0 : We provide for a prototypical implementation of a mediator as the necessary component to automatically translate data when transferred between the collaborating software agents (\\cref\{roadway-mediation\});}
\par\plain {\f0\fs24\b0\i0 * }{\f1\fs24\b0\i1 Principles}{\f0\fs24\b0\i0 : We base sIOP on establishing loose-coupling at the semantic level by introducing principles on semantic separation of concerns and semantic transparency (\\cref\{siop-principles\}), and show how these principles can be operationalised;}
\par\plain {\f0\fs24\b0\i0 * }{\f1\fs24\b0\i1 ISO42010 Architecture Viewpoint}{\f0\fs24\b0\i0 : We verify the applicability of the above concerns and principles by formulating their architectural consequences as a specific ISO42010}{\f1\fs24\b0\i1  }{\f0\fs24\b0\i0 sIOP Viewpoint, and we show their proper position in the total architecture as corresponding sIOP view. As ISO42010 is considered a set of best practises for architecture description, and therefore is used with architecture frameworks such as MoDAF, TOGAF, DoDAF, RM-ODP and so on, we conclude that our sIOP Viewpoint and View can be considered to consolidate sIOP for contemporary architectural paradigms (\\cref\{iso42010-viewpoint-on-siop\}).}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Based on these contributions we defend that access-and-play sIOP can be embedded and hidden in infrastructural services when considering semiotic fundamentals and adding loosely coupled formal semantics to contemporary architectural paradigms. To that end, we first describe the semiotic fundamentals in \\cref\{the-semiotic-and-philosophical-foundations-of-semantics\}.}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0}