{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 CourierNewPSMT;}{\f1\fmodern\fcharset0\fprq2 CourierNewPS-ItalicMT;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\fet2\ftnbj\aenddoc
\pgnrestart\pgnstarts0
\pard\plain \ltrch\loch {\f0\fs24\b0\i0 Abstracting semantics from a tacit, solidified software implication into a tangible, computational and distinct artifact provides us with the potential to connect to it and to make comparisons with the semantic artifact of the peer software agent. Based on the discipline of semiotics, we explain why semantics are irrelevant to software. Instead, we should focus on the reciprocity between data and the data processing code of software. This explains, too, the shortcomings of the current approach towards software semantics that rely on prescriptive information models. We argument that the application of ontologies and ontological commitment are fundamental to remedy current semantic shortcomings}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 * }{\f1\fs24\b0\i1 Semantic concerns (bridgehead)}{\f0\fs24\b0\i0 : Based on the discipline of semiotics, we explain why semantics are indifferent to software. Instead, we should focus on the reciprocity between data and the data processing code of software. This explains, too, the shortcomings of the current approach towards software semantics that rely on prescriptive information models. We argument that the application of ontologies and ontological commitment are fundamental to remedy current semantic shortcomings (\\cref\{bridgehead-semantics\});}
\par\plain {\f0\fs24\b0\i0 * }{\f1\fs24\b0\i1 Explicit semantics}{\f0\fs24\b0\i0 : ... (\\cref\{explicit-semantics\});}
\par\plain {\f0\fs24\b0\i0 * }{\f1\fs24\b0\i1 Cascading semantics into architectural models}{\f0\fs24\b0\i0 : We show how semantics can be related to the system models in a consistent and valid way (\\cref\{relating-the-conceptual-model-with-the-system-models\});}
\par\plain {\f0\fs24\b0\i0 * }{\f1\fs24\b0\i1 Principles}{\f0\fs24\b0\i0 : (See also the SOLID Principles: https://hackernoon.com/solid-principles-made-easy-67b1246bcdf ) We base semantics on establishing loose-coupling at the semantic level by introducing principles on semantic separation of concerns and semantic transparency (\\cref\{semantic-principles\}), and show how these principles can be operationalised;}
\par\plain {\f0\fs24\b0\i0 * }{\f1\fs24\b0\i1 ISO42010 Architecture Viewpoint}{\f0\fs24\b0\i0 : We verify the applicability of the above concerns and principles by formulating their architectural consequences as a specific ISO42010}{\f1\fs24\b0\i1  }{\f0\fs24\b0\i0 Semantic Viewpoint, and we show their proper position in the total architecture as corresponding semantic view. As ISO42010 is considered a set of best practises for architecture description, and therefore is used with architecture frameworks such as MoDAF, TOGAF, DoDAF, RM-ODP and so on, we conclude that our Semantic Viewpoint and View can be considered to consolidate semantic for contemporary architectural paradigms (\\cref\{iso42010-viewpoint-on-semantics\}).}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Based on these contributions we defend that software semantics are essentially the in software coagulated reciprocity between data and the data processing code. We further defend that re-usability, reliability, shareability, portability and interoperability are system engineering benefits that result from a separate semantic artifact. To that end, we first describe the semiotic fundamentals in \\cref\{the-semiotic-and-philosophical-foundations-of-semantics\}.}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0}