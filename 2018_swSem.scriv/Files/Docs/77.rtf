{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 CourierNewPSMT;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\fet2\ftnbj\aenddoc
\pgnrestart\pgnstarts0
\pard\plain \ltrch\loch {\f0\fs24\b0\i0 Contemporary software architectures apply many models that collectively represent the software agent, characterised now as System Models. We concluded that the Domain Model, an ontology, specifies the DoA. The collective data of the System Models represent the state of the software agent, whereas the collective data of the Domain Model represent the state of affairs in reality. Naturally, the state of affairs impacts the agent\loch\af0\hich\af0\dbch\af0\uc1\u8217\'92s state, and vice versa. What does this mean for the relationship between the System Models and the Domain Model? The objective is to achieve loosely coupled semantics between the Domain Model and the System Models, minimising their mutual dependency. We address this relationship in the first subsection, characterise in the second subsection the semantic services that the Domain Model can provide, and end with an example. }}