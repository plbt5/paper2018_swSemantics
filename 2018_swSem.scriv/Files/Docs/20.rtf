{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 CourierNewPSMT;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\fet2\ftnbj\aenddoc
\pgnrestart\pgnstarts0
\pard\plain \ltrch\loch {\f0\fs24\b0\i0   }
\par\plain {\f0\fs24\b0\i0   *Background:* Semantics and software are on odds with each other: software can only operate on a token-based machine whereas semantics require an interpretation outside the realm of tokens. This fundamental incompatibility depends for its resolution on the human-in-the-loop. With current artificial intelligence (AI) the fundamental incompatibility cannot be solved. However, the effort of the inevitable human-in-the-loop is rather high and although its results are documented in models and text, semantics remain ambiguous and a semantic monolith emerges that apply at the initial project team only. Worse, the business world changes and with it the need for semantics to evolve, reducing their already minimal potential to be reused, enforcing new projects to (re)start semantic modelling. To break through this vicious circle an initial agreement is required on the foundations of semantics and the role and position of the inevitable human-in-the-loop. This is a matter of software architecture, and we investigate how to re-use semantics and achieve her consolidation in contemporary software architectures.        }
\par\plain {\f0\fs24\b0\i0   }
\par\plain {\f0\fs24\b0\i0   *Objective:* We identify and formulate a fundamental notion on semantics in software, and derive their supporting architectural principles. We provide guidance to their design and integration in contemporary architectural paradigms, with a position of the human-in-the-loop that is reduced and once-only.    }
\par\plain {\f0\fs24\b0\i0   }
\par\plain {\f0\fs24\b0\i0   *Method:* We base our approach on work from disciplines outside ICT, viz. semiotics, pragmatics and linguistic philosophy, and connect that with formal semantics and ontology, meta-modelling, and modelling languages. We investigate the nature of the relation between software semantics and the regular parts of an architecture. We formulate all findings as additional principles and consolidate this notion in distinct and explicit architectural artifacts. We evaluate these principles by designing and formulating an ISO-42010 Architecture Viewpoint and View on software semantics.   }
\par\plain {\f0\fs24\b0\i0   }
\par\plain {\f0\fs24\b0\i0   *Results:* We establish a semiotic and pragmatic explanation on software semantics, and defend the need for an ontological commitment. We argue that semantics in software are reduced to the reciprocity between data and the software code that operates on them and conclude that this reciprocity forms the foundation for the semantic monolith that software agents inevitably represent. By acknowledging this inevitability, measures are taken to its modularisation into explicit atomic elements on the one hand, and their relationship with the system architecture on the other. The resulting ISO-42010 Architecture Viewpoint and View on software semantics consolidate the role and function of semantics in contemporary architectural paradigms as a separate but integrated tangible artifact. Software semantics, then, become the semantic bridgehead from which semantic reusability, reliability, shareability, portability and interoperability emerge as system engineering benefits.  }
\par\plain {\f0\fs24\b0\i0   }
\par\plain {\f0\fs24\b0\i0   *Conclusions:* The introduction of architectural principles on semiotics, pragmatics and ontological commitment provide for the capability to explicitly include and consolidate software semantics in contemporary architectural paradigms as a distinguished artefact.    }
\par\plain \f0\fs24\b0\i0}