{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 CourierNewPSMT;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\fet2\ftnbj\aenddoc
\pgnrestart\pgnstarts0
\pard\plain \ltrch\loch {\f0\fs24\b0\i0   *Background:* Access-and-Play semantic interoperability (sIOP) is the next glass ceiling in IT-based business collaboration. Current approaches towards sIOP rely on conventions on the semantics of the exchanged terms, which can be considered accepted folklore. Approaches to break through the ceiling require an initial agreement on the foundations of semantics and SIOp. Unfortunately, semantics and software are on odds with each other by nature of their underlying characteristics: software can only operate on a token-based machine whereas semantics require an interpretation outside the realm of tokens. This fundamental incompatibility depends for its resolution on the human-in-the-loop, whom has been positioned always at the production of semantic conventions. With the current state of the art in artificial intelligence (AI) the fundamental incompatibility cannot be solved yet, however, the effort for the human-in-the-loop can be reduced and better positioned. This is a matter of software architecture, and we will discuss this in a sequel of two papers. The first in the sequel, this one, addresses semantics, while the second one will address semantic interoperability.        }
\par\plain {\f0\fs24\b0\i0   }
\par\plain {\f0\fs24\b0\i0   *Objective:* The objective of this first part of our study is to identify and formulate a fundamental notion on semantics in software, and derive their supporting architectural principles. We further aim to provide guidance to its design and integration in contemporary architectural paradigms where the role and position of the human-in-the-loop remains necessary but in a reduced, once-only form.    }
\par\plain {\f0\fs24\b0\i0   }
\par\plain {\f0\fs24\b0\i0   *Method:* Our approach is based on the disciplines of semiotics, formal semantics and ontology, meta-modelling, and modelling languages. We establish a semiotic explanation on software semantics and consolidate this notion in a distinct and explicit architectural artifact. We investigate the nature of the relation between software semantics and the regular parts of an architecture, and formulate all findings as additional principles. We then evaluate these principles by designing and formulating an ISO-42010 Architecture Viewpoint and View on software semantics.   }
\par\plain {\f0\fs24\b0\i0   }
\par\plain {\f0\fs24\b0\i0   *Results:* The semiotic approach demonstrates semantics in software to be reduced to the reciprocity between data and the software code that operates on them. This reciprocity lays the foundation for the semantic monolith that software agents inevitably represent. By acknowledging this inevitability, measures can be taken to its modularisation into explicit atomic elements at the one hand, and their relationship with the system architecture at the other. The resulting ISO-42010 Architecture Viewpoint and View on software semantics can be considered a pattern to consolidate semantics in contemporary architectural paradigms as a separate, tangible artifact. Software semantics, then, become the semantic bridgehead from which semantic reusability, reliability, shareability, portability and interoperability emerge as system engineering benefits.  }
\par\plain {\f0\fs24\b0\i0   }
\par\plain {\f0\fs24\b0\i0   *Conclusions:* The major shortcomings in architectural paradigms to account for software semantics are their negligence of semiotic fundamentals and the absence of an explicit ontological commitment that stands at its root. By their explicit inclusion, software semantics can be consolidated in contemporary architectural paradigms. In part 2 of the sequel we elaborate on the use of this semantic bridgehead to formulate a sIOP-bridge between collaborating software agents.   }
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0}