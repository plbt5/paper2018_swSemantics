{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 CourierNewPSMT;}{\f1\fmodern\fcharset0\fprq2 CourierNewPS-ItalicMT;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\fet2\ftnbj\aenddoc
\pgnrestart\pgnstarts0
\pard\plain \ltrch\loch {\f0\fs24\b0\i0 The use of ontologies as information model is suggested before. For instance, [@Almeida2018a] represents a typical discussion on the foundations of an ontological-based architecture for organising information and knowledge. The authors, too, consider the use of a top-level ontology, here BFO. However, not unlike many other publications found in literature that discuss the use of ontologies to account for semantics, the authors are merely concerned with provisioning an ontological perspective on the domain of application, in this particular case about the structure of corporations, and do not consider its principled position in a software architecture. Vice versa, in literature concerning software architecture, many authors emphasise the need for an information view or model to account for semantics, and obviously provide for its relation with other views and models in that architecture. In fact, this can be considered the current view in leading architectural frameworks such as TOGAF, RM-ODP, ISO42010 and more. As we stated earlier, these information views neglect the influence of the modelling language as ontological commitment on semantics, the semiotic foundations and its subsequent explicit separation between the semantic and pragmatic meaning. We have to go back to [@Krishnamurthy1988;@Su1989] for a software architecture that explicitly considers semantics of data and also provides a framework for representing data and knowledge in an integrated fashion. The authors combine object-orientation with AI knowledge representation techniques, and represents to our knowledge the only proposal to integrate knowledge rules as necessary elements to a class definition. They further distinguish from other object-oriented approaches by allowing different classes to model different perspectives of the same object without running into the problem of multiple inheritance. All in all, this comes very close to our ASM except for our emphasis on coherence between the semantic and pragmatic meaning and the need for an ontological commitment.}
\par\plain \f0\fs24\b0\i0
\par\pard\plain \ri-17053\ql\ltrch\loch {\f0\fs24\b0\i0 The authors of [@Bachmann2007] propose an approach to Ontology-based Software Engineering (OBSE) that identifies the use of ontologies in the process of software engineering. In their view, software engineering projects inherit from existing ontologies in their early (analysis and modelling) phases and offer (parts of) their results for further ontology development and evolution. Such approach makes perfect sense, particularly when we acknowledge that business requirements analysis is often hampered by ambiguities and misunderstandings that occur between domain experts and requirements analysts. The application of OBSE in any form is not rare anymore, and many examples can be given to its effect. Still, such approach takes the process perspective while our approach is oriented towards the role and meaning of semantics in software and the subsequent semantic artefacts. In short, where we consider ontologies as first-class citizen for a software architecture, the authors of this otherwise relevant approach consider ontologies as a means to develop the architecture. Given the complementary perspectives of both approaches we do not see any objection, though, to merge both approaches.}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 In [@Carraretto2012], the authors provide initial steps for a principled two-level approach, viz. an ontological level that essentially provides for a vocabulary that is used at the information level to formulate an *information model* to address information concerns about *reference* (how to identify things), *measurement* (how to qualify properties of things), *history tracking* (how to maintain a registry on past and present) and *time* (how to model events). We appreciate the essential idea that reusing the conceptual (i.e., backward-looking) model by what the authors call the information level (i.e., forward-looking models) is in demand of one or more relations between them. However, in our opinion the core question is what types of relationship are required and appropriate, and what types should be omitted, and seek our answer in the distinction between the functional concerns of the backward-looking ontology and the extra-functional concerns of the forward-looking models, as opposed to the characteristics of the ontology alone.      }
\par\pard\plain \ql\ltrch\loch \f0\fs24\b0\i0
\par\pard\plain \ri-17053\ql\ltrch\loch {\f0\fs24\b0\i0 In [@A\loch\af0\hich\af0\dbch\af0\uc1\u223\'DFmann2006] the authors discuss the use and place of ontologies and meta-models in the MDE paradigm. They, too, discuss the differences between ontologies, models and meta-models and conclude, like us, that meta-models prescribe the capabilities of the modelling language. However, their objective is not so much in consolidating semantics in software, but to find a proper place for ontologies in the MDE specification hierarchy as defined by OMG\u8217\'92s meta-pyramid, the standard four layer MOF hierarchy. We value their conclusions that ontologies can be applied as descriptive standardized domain models, domain specific languages or modelling (descriptive) languages, that should not be mingled with specification models of software systems. Our investigation into the nature of semantics and the necessary consideration of the semiotic triangle leads us to more specific conclusions on the relationship between semantics, ontologies and system models that evolves from their views on the placement and relationships between ontologies, models and meta-models. In line with [@A\u223\'DFmann2006], the authors from [@Gasevic2006a] consider ontologies and the MDE paradigm, specifically oriented towards applications of the MDA for ontology development on the Semantic Web. To that end, the book is closely related to OMG\u8217\'92s initiative to standardise the Ontology Definition Metamodel (ODM) using the MOF. Particularly, part II: The Model Driven Architecture and Ontologies, is relevant to our work in that it tries to establish the relationship between the various domain and system models. The approach takes the same perspective as [@A\u223\'DFmann2006], viz. the standard four layer MOF hierarchy, but differs from it in that the relationships between the models are instances of prescribed mappings between their metamodels. In doing so, we appreciate their impressive modelling technique to incorporate ontologies in the MOF, but again must conclude that such a normative modelling framework does not consolidate semantics.         }
\par\pard\plain \ql\ltrch\loch \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 An interesting initiative about a further *semantic* validation can be found in [@Szlenk2006], where the authors define a verification of a class diagram on the basis of whether the intended model instances of the diagram satisfy the constraints that have been defined, and, where classifiers are applied consistently over the intended model instances. Despite the more elaborated mathematical verification, it remains applicable to system modelling only due to the absence of a formal semantic grounding as discussed in \\cref\{domain-appropriateness-concerns\}. }
\par\plain \f0\fs24\b0\i0
\par\pard\plain \ri-17053\ql\ltrch\loch {\f0\fs24\b0\i0 According to the strict meta-modelling approach of OMG, an instance-of relation is only valid between subsequent layers in OMG\loch\af0\hich\af0\dbch\af0\uc1\u8217\'92s four-layer hierarchy, and its use within a single layer is prohibited. Hence, a model is an instance-of its meta-model. In [@Atkinson:2001kl], the inherent conflicts of this approach are addressed, giving rise to *multilevel (meta)modelling* methods that distinguish between *linguistic instantiation* (an Object being the instance of its Class) versus *ontological instantiation* (a *Particular* tree that gives rise to acknowledging the existence of a *Universal* Tree). Linguistic meta-modelling assumes OMG\u8217\'92s four layer MOF hierarchy; for each of the adjacent pair of layers the meta layer is considered to model the types that the lower layer can apply in its own model. Adjacent layers are therefore connected though a type-instance relationship, denoted as }{\f1\fs24\b0\i1 linguistic instance-of}{\f0\fs24\b0\i0  but better relabelled }{\f1\fs24\b0\i1 conforms-to}{\f0\fs24\b0\i0  [@Bezivin2004; Favre2004a] in order to prevent ambiguities by overloading the }{\f1\fs24\b0\i1 instance-of}{\f0\fs24\b0\i0  label. Contrarily, ontological meta-modelling acknowledges only one single genuine }{\f1\fs24\b0\i1 instance-of}{\f0\fs24\b0\i0  relationship between the universals and their individuals. At the DoI, the conceptualisation also recognises subsets of supersets, which translates to the generalisation relationship [@Kuhne2006]. Although the author clearly identifies in [@Atkinson2003; and @Atkinson2011] the necessity for both modes of modelling, the method of their integration is not without issues [@Henderson-Sellers2012].}
\par\plain \f0\fs24\b0\i0}
