{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 CourierNewPSMT;}{\f1\fmodern\fcharset0\fprq2 CourierNewPS-ItalicMT;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\fet2\ftnbj\aenddoc
\pgnrestart\pgnstarts0
\pard\plain \ri-16872\ql\ltrch\loch {\f0\fs24\b0\i0 As indicated in \\cref\{fig:semiotic-triangles\}(b), we equate faithfulness with trueness between the representation and the entity in reality. Since this aspect is a characteristic of an indirect relationship, it can only emerge as a result of the adequacy and correctness characteristics in that same Figure. Adequacy concerns the quality of the abstraction, which we do not address here. Correctness concerns the quality of the representation, and in this section we show how differences can emerge between the conceptualisation and the model when constructing the latter from the former.}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 In literature, four construct issues are considered between a conceptualisations and its representation in a model, }{\field{\*\fldinst HYPERLINK "scrivcmt://B9E1CE5A-9F37-49D4-988D-63223C14B311"}{\fldrslt\f0\fs24\b0\i0 depicted in}}{\f0\fs24\b0\i0  \\cref\{fig:construct-issues\}. An exhaustive treatment can be found in [@Guizzardi:2005vt], see also [@CarvalhoeSilva2012; or @Azevedo2015].}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 ![Four different types of construction issues that come with formal semantics. (a) CarvalhoeSilva2012, (b) Azevedo2015][def:constructissues] }
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 The correctness with which tokens represent the conceptualisation improves when the four construct issues are minimised:}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 * }{\f1\fs24\b0\i1 Construct overload}{\f0\fs24\b0\i0 , or }{\f1\fs24\b0\i1 non-lucidity}{\f0\fs24\b0\i0 , emerges when the interpretation function maps an element from the abstract syntax onto more than one element (individual, subset) from the conceptualisation: One token can mean more than one thing, e.g., $\\CMcal\{I\}\\left(\\text\{\\token\{bank\}\}\\right) = \\left\\\{ \\, \\text\{[|S], [|F], [|E]\} \\, \\right\\\}$, where [|S] stands for sofa, [|F] for a financial institute, and [|E] for a rising edge;}
\par\pard\plain \tx720\ql\ltrch\loch {\f0\fs24\b0\i0 * }{\f1\fs24\b0\i1 Construct excess}{\f0\fs24\b0\i0 , or }{\f1\fs24\b0\i1 unsoundness}{\f0\fs24\b0\i0 , represents an abstract syntax element that does not map onto an element from the conceptualisation: One token does not have a meaning at all, $\\CMcal\{I\}\\left(\\text\{\\token\{pf\\^o.h\}\}\\right) = \\text\{[|$\\bot$]\}$, where the *falsum* concept ([|$\\bot$]) denotes the empty set (the valuation of which is always False);}
\par\pard\plain \ri-16872\ql\ltrch\loch {\f0\fs24\b0\i0 * }{\f1\fs24\b0\i1 Construct redundancy}{\f0\fs24\b0\i0 , or }{\f1\fs24\b0\i1 non-laconicity}{\f0\fs24\b0\i0 , occurs when more than one abstract syntax element can be used to represent an element from the conceptualisation: More tokens mean the same, e.g., $\\CMcal\{I\}\\left(\\text\{\\token\{courageous\}\}\\right) = \\CMcal\{I\}\\left(\\text\{\\token\{bold\}\}\\right) = \\CMcal\{I\}\\left(\\text\{\\token\{brave\}\}\\right) = \\text\{[|brave]\}$;}
\par\plain {\f0\fs24\b0\i0 * }{\f1\fs24\b0\i1 Construct deficit}{\f0\fs24\b0\i0 , or }{\f1\fs24\b0\i1 incompleteness}{\f0\fs24\b0\i0 , specifies the situation where a conceptual element does not map onto a token: It is impossible to express a concept because the language has no token for it, e.g., $\\CMcal\{I\}^\{-1\}\\left(\\text\{[|c]\}\\right) = \\text\{\loch\af0\hich\af0\dbch\af0\uc1\u8220\'93\\quad\u8221\'94\}$, with $c$ some conceptual element and token \u8220\'93\\quad\u8221\'94 intentionally left blank.}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 The best representation of a conceptualisation, then, is a model that is lucid, sound, laconic and complete, i.e., the subjectivation/representation mapping is isomorphic [@Guizzardi:2005vt]^[This is in clear contrast with the relationship between concepts in the data model and concepts in their data processing model that was discussed in \\cref\{enforcing-coherence\}. In terms of construct issues, that relationship allows construct overload and construct redundancy.]. This strongly depends on the modelling language, and particularly its appropriateness with which it carves-out the reality of the DoI, viz. the \loch\af0\hich\af0\dbch\af0\uc1\u8220\'93ontological level\u8221\'94 [@Guarino1994b], our \u8220\'93terminological competence [that] can be gained by formally expressing the ontological commitment of a knowledge base\u8221\'94 (ibid.). We turn this into the following design principle.}
\par\plain \f0\fs24\b0\i0
\par\pard\plain \ri-8561\ql\ltrch\loch {\f0\fs24\b0\i0 \\begin\{mmdp\}[Domain appropriateness principle]\\label\{dp:domain-appropriateness-principle\}}
\par\plain \f0\fs24\b0\i0
\par\pard\plain \ql\ltrch\loch {\f0\fs24\b0\i0 The faithfulness of the semantic model depends on the ontological commitment of the modelling language: the more appropriate it carves out the domain of interest, the more faithful the model can represent the conceptualisation. \\\\}
\par\pard\plain \ltrch\loch {\f0\fs24\b0\i0 \\textbf\{Type of information:\} business \\\\}
\par\plain {\f0\fs24\b0\i0 \\textbf\{Quality attributes:\} (semantic) accuracy, suitability, re-usability, understandability \\\\}
\par\plain {\f0\fs24\b0\i0 \\textbf\{Rationale:\}}
\par\plain {\f0\fs24\b0\i0 \\begin\{enumerate\}}
\par\plain {\f0\fs24\b0\i0 \\item A software agent cannot act effectively without a model of its DoI that represents the DoI. The trueness with which that model refers to the DoI directly reflects the quality of (the results of) the agent\loch\af0\hich\af0\dbch\af0\uc1\u8217\'92s actions. Trueness emerges as the subsequent application of the \\emph\{adequacy\} of the abstraction from reality and the \\emph\{correctness\} with which the conceptualisation is represented;  }
\par\plain {\f0\fs24\b0\i0 \\item The correctness of the representation of the conceptualisation improves by minimising the construct issues that occur in the model;}
\par\plain {\f0\fs24\b0\i0 \\item Construct issues are a direct result of representing a concept with a language element that is not suited or even present to express that concept. Unable to correctly express a concept is a direct consequence of the inadequacy of the underlying ontological commitment;}
\par\plain {\f0\fs24\b0\i0 \\end\{enumerate\}}
\par\plain {\f0\fs24\b0\i0 \\textbf\{Implications:\}}
\par\plain {\f0\fs24\b0\i0 \\begin\{enumerate\}}
\par\plain {\f0\fs24\b0\i0 \\item The more specific the ontological commitment, the higher the semantic accuracy with which the model can refer to the DoI;}
\par\plain {\f0\fs24\b0\i0 \\item The more specific the ontological commitment, the higher its complexity which might even turn into a NP-complexity \\cite\{Daniele2014\};}
\par\plain {\f0\fs24\b0\i0 \\item The semantic ability of a software agent increases with the domain appropriateness of the model;}
\par\plain {\f0\fs24\b0\i0 \\item Suitability is defined by \\cite\{VanZeist1996\} as \loch\af0\hich\af0\dbch\af0\uc1\u8220\'93Attribute of software that bears on the presence and appropriateness of a set of functions for specified tasks\u8221\'94. We consider the suitability of the agent to act as semantic vehicle to the end user to be directly dependent on the domain appropriateness of the model;}
\par\plain {\f0\fs24\b0\i0 \\item The re-usability of the agent, defined by \\cite\{VanZeist1996\} as \loch\af0\hich\af0\dbch\af0\uc1\u8220\'93Attributes of software that bear on its potential for complete or partial reuse in another software product\u8221\'94 is more dependent upon the ontological commitment of the modelling language, than what actually has been expressed by the model: adapting the latter has far less consequences for the agent than adapting the former. Consequently, the higher the domain appropriateness of the model, the higher it\u8217\'92s re-usability;}
\par\plain {\f0\fs24\b0\i0 \\item An indicator for understandability, \\emph\{concept clearness\}, is defined as \loch\af0\hich\af0\dbch\af0\uc1\u8220\'93The proportion of functions that can be explained by using clear, familiar models to illustrate concepts. This represents the degree to which the functions and conventions of a software product are explained through models using familiar concepts from the everyday world\u8221\'94 \\cite\{VanZeist1996\}. We consider this indicator highly dependent on the domain appropriateness; }
\par\plain {\f0\fs24\b0\i0 \\end\{enumerate\}  }
\par\plain {\f0\fs24\b0\i0 \\end\{mmdp\}}
\par\plain {\f0\fs24\b0\i0 It is the responsibility of the software engineer to select a modelling language that provides a balance between semantic faithfulness and computational (and comprehensibility) complexity for representing the model.}
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0
\par\pard\plain \ql\ltrch\loch {\f0\fs24\b0\i0 <!-- page additions -->}
\par\pard\plain \ri-16872\ql\ltrch\loch {\f0\fs24\b0\i0 [def:constructissues]: src\\images\\ConstructIssues.png \{#fig:construct-issues  width=80%\}}
\par\pard\plain \ltrch\loch \f0\fs24\b0\i0}