{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 CourierNewPSMT;}{\f1\fmodern\fcharset0\fprq2 CourierNewPS-ItalicMT;}{\f2\fmodern\fcharset0\fprq2 CourierNewPS-BoldMT;}{\f3\fmodern\fcharset0\fprq2 monospace;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\fet2\ftnbj\aenddoc
\pgnrestart\pgnstarts0
\pard\plain \tx1899\ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0 The prime citizens in our architecture are ontologies, models and architectural relations that apply between them. Characterising an ontology requires to specify the formal ontology language (taken from [@Euzenat:2013ie]), the formal grammar (brought in relation to the web ontology language OWL2, [@Motik2012]) and the interpretation function between well-formed theories and a set theoretic framework.  }
\par\pard\plain \ltrch\loch \f0\fs24\b0\i0
\par\pard\plain \ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0 \\begin\{mmdef\}[Ontology language]\\label\{def:ontology-language\}}
\par\pard\plain \tx1899\ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0 An ontology language, denoted $L_\{\\ont\{O\}\}$, is a formal language (refer to \\cref\{def:formal-language\}) characterised by a tuple $\\tuple\{\\Sigma_s, \\Sigma_p, \\Sigma_\{ce\} \\cup \\Sigma_\{ca\} \}$. It specifies an abstract syntax, i.e., strings that are composed of an alphabet $\\Sigma$ that consists of atomic symbols $\\Sigma_s$, atomic predicates $\\Sigma_p$, and, constants $\\Sigma_\{ce\} \\cup \\Sigma_\{ca\}$, with:}
\par\pard\plain \ri-9048\ltrch\loch {\f0\fs24\b0\i0 \\begin\{align*\}}
\par\plain {\f0\fs24\b0\i0   \\Sigma_s \\; &\\subseteq \\; I \\cup V \\cup \\; \\set\{\\emptyset\} \\\\}
\par\plain {\f0\fs24\b0\i0   \\Sigma_p \\; &\\subseteq \\; C \\cup R \\cup P \\cup T \\\\}
\par\pard\plain \tx1899\ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0   \\Sigma_\{ca\} \\; &= \\; \\\{ \\sqsubset, \\sqsupset, \\equiv, \\bot, \\ndisjoint, \\sqin, \\sqni \\\} \\textsuperscript\{\\cref\{rmk:ca\}\} \\\\}
\par\pard\plain \tx1899\ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0   \\Sigma_\{ce\} \\; &= \\; \\\{ \\neg, \\land, \\lor, \\to, \\leftrightarrow , (, )\\\}}
\par\pard\plain \ri-9048\ltrch\loch {\f0\fs24\b0\i0 \\end\{align*\}}
\par\pard\plain \tx1899\ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0 where }
\par\plain {\f0\fs24\b0\i0 \\begin\{itemize\}[label=\{--\}]}
\par\pard\plain \tx1899\ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0   \\item $\\Sigma_s$ represent the following \\emph\{individuals\}:}
\par\pard\plain \ri-9048\ltrch\loch {\f0\fs24\b0\i0   \\begin\{itemize\}[leftmargin=2cm,label=\{\}]}
\par\pard\plain \tx720\ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0     \\item[$I$:]\{denotes the set of individuals that refer to things, and, hence, represent instances of classes $C$; \}}
\par\pard\plain \tx720\ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0     \\item[$V$:]\{denotes the set of individuals that refer to data values, and, hence, represent instances of datatypes $T$;\}}
\par\pard\plain \ri-9048\ltrch\loch {\f0\fs24\b0\i0   \\end\{itemize\}}
\par\pard\plain \tx1899\ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0   \\item $\\Sigma_p$ represent the following \\emph\{concepts\}:}
\par\pard\plain \ri-9048\ltrch\loch {\f0\fs24\b0\i0   \\begin\{itemize\}[leftmargin=2cm,label=\{\}]}
\par\pard\plain \tx1899\ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0     \\item[$C$:]\{denotes the set of classes. These are the main citizens in the ontology;\}}
\par\pard\plain \tx1899\ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0     \\item[$R$:]\{denotes the set of relations. These connect pairs of individuals from $I$, i.e., instances of two different or one single class from $C$;\}}
\par\pard\plain \tx1899\ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0     \\item[$P$:]\{denotes the set of properties. These connect individuals from $I$ to individuals from $V$, i.e., values as instances of data types $T$;\}}
\par\pard\plain \tx1899\ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0     \\item[$T$:]\{denotes the set of data types. Each data type refers to a set of data values that share a particular type. Such type can be a primitive data type, e.g., integers, or a user-defined construct that might apply constraints, e.g., a person name of which each value distinguishes between initials, family name, first name, and optionally several other middle names. Every datatype refers to a particular set of values in reality, denoted as the \\emph\{value space\};\}}
\par\pard\plain \tx720\ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0   \\end\{itemize\}}
\par\pard\plain \tx720\ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0   \\item $\\Sigma_\{ca\}$ represents connectives to formulate \\emph\{concept axioms\}:}
\par\pard\plain \ri-9048\ltrch\loch {\f0\fs24\b0\i0   \\begin\{itemize\}[leftmargin=2cm,label=\{\}]}
\par\pard\plain \tx720\ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0     \\item[$\\sqsubset, \\sqsupset$:]\{denote the \\emph\{specialization\} resp. \\emph\{generalization\} relations on $(C \\times C) \\cup (R \\times R) \\cup (P \\times P) \\cup (T \\times T)$;\}}
\par\pard\plain \tx720\ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0     \\item[$\\bot, \\ndisjoint$:]\{denotes the \\emph\{exclusion\} resp. \\emph\{overlap\} relations on $(C \\times C) \\cup (R \\times R) \\cup (P \\times P) \\cup (T \\times T)$. This represents the fact that classes (or relations, or properties, or data types) can either be completely independent from each other, or share a certain mutual characteristic;\}}
\par\pard\plain \tx720\ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0     \\item[$\\sqin, \\sqni$:]\{denotes the \\emph\{instantiation\} resp. \\emph\{containment\} relations on $(I \\times C) \\cup (V \\times T)$, resp. $(C \\times I) \\cup (T \\times V)$. This essentially formalises that (i) an individual $\\iota$ belongs to, or more precisely, instantiates, a particular class $c$, and, simiarly, (ii) a value $v$ instantiates (or, is of) a specific type $t \\in T$;\}}
\par\pard\plain \tx720\ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0     \\item[$\\equiv$:]\{denotes the \\emph\{assignment\} relation on $(I \\times R \\times I) \\cup (I \\times P \\times V)$. This implies that individuals can be assigned to an individual (the instantiated version of how a relation $r \\in R$ connects classes $c_1, c_2 \\in C$), or, that individuals can carry an actual value (the instantiated version of how properties $p \\in P$ connect a class $c \\in C$ to a data type $t \\in T$). \}}
\par\pard\plain \ri-9048\ltrch\loch {\f0\fs24\b0\i0   \\end\{itemize\}}
\par\plain {\f0\fs24\b0\i0   \\item $\\Sigma_\{ce\}$ represents the set of connectives to formulate \\emph\{concept expressions\}, i.e., logical operators that are applied to construct combinations of concepts. }
\par\plain {\f0\fs24\b0\i0 \\end\{itemize\}}
\par\plain {\f0\fs24\b0\i0 \\end\{mmdef\}}
\par\pard\plain \tx720\ri-9048\ql\ltrch\loch \f0\fs24\b0\i0
\par\pard\plain \tx720\ri-11769\ql\ltrch\loch {\f0\fs24\b0\i0 Note that the domain of interpretation, $\\EuScript\{D\}$, for the ontology language $L_\\ont\{O\}$ is defined as the disjunct union of the data domain and the object domain, i.e., $\\EuScript\{V\} \\cup \\EuScript\{I\}$.}
\par\pard\plain \ri-9048\ql\ltrch\loch \f0\fs24\b0\i0
\par\pard\plain \tx1899\ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0 Indeed, the OWL2 web ontology language [@Motik2012] is defined in accordance to a formal language: }
\par\pard\plain \ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0 \\begin\{align*\}}
\par\pard\plain \tx720\ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0   \\Sigma_s    \\; &= \\; \\set\{\\texttt\{owl:Individuals, owl:Literal\}\} \\\\}
\par\pard\plain \tx1899\ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0   \\Sigma_p    \\; &= \\; \\set\{\\texttt\{owl:Class, owl:ObjectProperty, owl:DataProperty, owl:Datatype\}\} \\\\}
\par\pard\plain \tx1899\ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0   \\Sigma_\{ca\} \\; &: \\; \\text\{for example, specialization relation on classes as \} \\sqsubset = \\texttt\{owl:}{\f0\fs24 SubClassOf}{\f0\fs24\b0\i0 \} \\\\}
\par\pard\plain \tx1899\ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0   \\Sigma_\{ce\} \\; &: \\; \\text\{for example, conjunction on classes as \} \\land = \\texttt\{owl:}{\f0\fs24 ObjectIntersectionOf}{\f0\fs24\b0\i0 \}     }
\par\pard\plain \ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0 \\end\{align*\}}
\par\plain {\f0\fs24\b0\i0    }
\par\pard\plain \tx1899\ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0 Additionally to an abstract syntax, a formal language requires a grammar that produces well-formed formulae, or theories, of that language. This applies for an ontology language as well. We provide for a short definition on the grammar for the Web Ontology Language OWL2, by showing how \\cref\{def:formal-grammar\} relates to [@Motik2012 section 13 Appendix: Complete Grammar (Normative)].}
\par\pard\plain \tx720\ri-9048\ql\ltrch\loch \f0\fs24\b0\i0
\par\pard\plain \ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0 \\begin\{mmdef\}[Grammar of an OWL2 ontology language]\\label\{def:grammar-ontologies\}}
\par\pard\plain \tx1899\ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0 Following \\cref\{def:formal-grammar\}, a generic grammar $G_\\ont\{O\}$ of an ontology $\\ont\{O\}$ is a structure $\\langle N, \\Sigma, P, \\alpha \\rangle$ where}
\par\pard\plain \ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0 \\begin\{align*\}}
\par\plain {\f0\fs24\b0\i0   \\Sigma \\; &= \\; \\text\{as in \\cref\{def:ontology-language\}\} \\\\}
\par\pard\plain \tx720\ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0   N      \\; &= \\; \\text\{all non-terminal symbols as defined in \\cite\{Motik2012\} Table 1\} \\\\}
\par\pard\plain \ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0   \\alpha \\; &= \\bnfpn\{\\texttt\{owl:Axiom\}\}; }
\par\plain {\f0\fs24\b0\i0 \\end\{align*\}}
\par\pard\plain \tx720\ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0 and $P$ representing the Backus-Naur Form (BNF) grammar to produce a theory as defined in section 13 Appendix: Complete Grammar (Normative).}
\par\pard\plain \ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0 \\end\{mmdef\}}
\par\pard\plain \tx1899\ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0 Taking both definitions together, an abstract syntax emerges as $S_L = \\tuple\{L, G_L\}$. }
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 The definitions of ontology language and ontology grammar are in fact very similar to the definition of OWL2, the Web Ontology Language. The only differences with [@Motik2012] are (i) found in our one letter elements in the language as opposed to the use of \\texttt\{owl:$\\ldots$\}-IRI\loch\af0\hich\af0\dbch\af0\uc1\u8217\'92s, as indicated above, and (ii) that our grammar is a subset of the OWL-2 grammar, since the latter specifies in addition to the actual ontology also an ontology \\emph\{document\} as its envelope.}
\par\pard\plain \ri-9048\ql\ltrch\loch \f0\fs24\b0\i0
\par\pard\plain \tx720\ri-11769\ql\ltrch\loch {\f0\fs24\b0\i0 The interpretation function for their ontology language $L_\\ont\{O\}$ is given in [@Euzenat:2013ie, Definition 2.3], mapping all elements in its alphabet onto the DoI $\\EuScript\{D\} = \\EuScript\{V\} \\cup \\EuScript\{I\}$. Since we extended their definition on $L_\\ont\{O\}$ to explicitly include the *property* as part of $L_\\ont\{O\}$, \\cref\{def:ontology-language\}, we also need to extend their definition on its interpretation; it, then, becomes very close to the semantics of OWL2 as defined in [@Motik2012a], as follows: }
\par\pard\plain \tx720\ri-11769\ql\ltrch\loch {\f0\fs24\b0\i0 \\begin\{mmdef\}[Interpretation function for $L_\\ont\{O\}$]\\label\{def:interpretation-function-for-L_O\}}
\par\pard\plain \tx720\ri-11769\ql\ltrch\loch {\f0\fs24\b0\i0 Consider the ontology language $L_\\ont\{O\}$ from \\cref\{def:ontology-language\}, and its domain of interpretation as the disjoint union of the data domain and the object domain, $\\EuScript\{D\} = \\EuScript\{V\} \\cup \\EuScript\{I\}$, then the interpretation function $\\intn(\\cdot)$ is a mapping:}
\par\plain {\f0\fs24\b0\i0 \\[L_\\ont\{O\} \\to \\EuScript\{V\} \\cup \\EuScript\{I\}\\]}
\par\pard\plain \tx1899\ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0 where:}
\par\plain {\f0\fs24\b0\i0 \\begin\{itemize\}[label=\{--\}]}
\par\pard\plain \tx720\ri-11769\ql\ltrch\loch {\f0\fs24\b0\i0   \\item $\\Sigma_s \\to \\EuScript\{V\} \\cup \\EuScript\{I\}$:}
\par\pard\plain \ri-16872\ql\ltrch\loch {\f0\fs24\b0\i0    \\begin\{alignat*\}\{3\}}
\par\pard\plain \tx1899\ri-16872\ql\ltrch\loch {\f0\fs24\b0\i0     \\forall \\iota &\\in I \\; &&: \\; &\\intn(\\iota) &\\in \\EuScript\{I\} \\\\}
\par\pard\plain \tx1899\ri-16872\ql\ltrch\loch {\f0\fs24\b0\i0     \\forall v &\\in V \\;     &&: \\; &\\intn(v) &\\in \\EuScript\{V\}}
\par\pard\plain \ri-16872\ql\ltrch\loch {\f0\fs24\b0\i0    \\end\{alignat*\}}
\par\pard\plain \tx720\ri-11769\ql\ltrch\loch {\f0\fs24\b0\i0   \\item $\\Sigma_r \\to \\EuScript\{V\} \\cup \\EuScript\{I\}$:}
\par\pard\plain \ri-16872\ql\ltrch\loch {\f0\fs24\b0\i0    \\begin\{alignat*\}\{3\}}
\par\pard\plain \tx1899\ri-16872\ql\ltrch\loch {\f0\fs24\b0\i0     \\forall c &\\in C \\;     &&: \\; &\\intn(c) &\\subseteq \\EuScript\{I\} \\\\}
\par\pard\plain \tx1899\ri-16872\ql\ltrch\loch {\f0\fs24\b0\i0     \\forall r &\\in R \\;     &&: \\; &\\intn(r) &\\subseteq \\EuScript\{I\} \\times \\EuScript\{I\} \\\\}
\par\pard\plain \tx1899\ri-16872\ql\ltrch\loch {\f0\fs24\b0\i0     \\forall p &\\in P \\;     &&: \\; &\\intn(p) &\\subseteq \\EuScript\{I\} \\times \\EuScript\{V\} \\\\}
\par\pard\plain \tx1899\ri-16872\ql\ltrch\loch {\f0\fs24\b0\i0     \\forall t &\\in T \\;     &&: \\; &\\intn(t) &\\subseteq \\EuScript\{V\} }
\par\pard\plain \ri-16872\ql\ltrch\loch {\f0\fs24\b0\i0    \\end\{alignat*\}}
\par\pard\plain \tx720\ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0   \\item $\\Sigma_\{ca\} \\to \\set\{\\texttt\{T, F\}\}$: We will not repeat \\cite\{Euzenat:2013ie\}, Definition 2.4, which formulates the valuation of the connectors $\\Sigma_\{ca\}$ in the alphabet.}
\par\pard\plain \tx720\ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0   \\item $\\Sigma_\{ce\} \\to \\set\{\\texttt\{T, F\}\}$: These connectors are interpreted by truth-functions, as defined in \\cref\{def:truth-functions\}.}
\par\pard\plain \tx1899\ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0 \\end\{itemize\}}
\par\pard\plain \ri-16872\ql\ltrch\loch {\f0\fs24\b0\i0 \\end\{mmdef\}}
\par\pard\plain \tx720\ri-9048\ql\ltrch\loch \f0\fs24\b0\i0
\par\pard\plain \tx720\ri-11769\ql\ltrch\loch {\f0\fs24\b0\i0 We can now formalise an ontology, as follows.}
\par\pard\plain \ql\ltrch\loch \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 \\begin\{mmdef\}[Ontology]\\label\{def:ontology\}}
\par\pard\plain \tx1899\ql\ltrch\loch {\f0\fs24\b0\i0 An ontology $\\ont\{O\}$ is a structure $\\tuple\{S_\{L_\{\\ont\{O\}\}\}, M\}$, where:}
\par\plain {\f0\fs24\b0\i0 \\begin\{itemize\}[leftmargin=2cm,label=\{\}]}
\par\pard\plain \tx1899\ql\ltrch\loch {\f0\fs24\b0\i0  \\item[$S_\{L_\\ont\{O\}\} =$]\{$\\tuple\{L_\{\\ont\{O\}\}, G_\{\\ont\{O\}\}\}$, denoting the abstract syntax that produces the set of theories $\\phi$ from ontology language $L_\{\\ont\{O\}\}$ (\\cref\{def:ontology-language\}) by grammar $G_\{\\ont\{O\}\}$ (\\cref\{def:grammar-ontologies\})\}}
\par\pard\plain \tx1899\ql\ltrch\loch {\f0\fs24\b0\i0  \\item[$M =$]\{$\\tuple\{C, \\intn(\\cdot)\}$, denoting the intended models for $S_\{L_\{\\ont\{O\}\}\}$\}}
\par\pard\plain \tx1899\ql\ltrch\loch {\f0\fs24\b0\i0  \\item[$C =$]\{the conceptualisation as formulated in \\cref\{enforcing-coherence\}, and\}}
\par\pard\plain \tx720\ri-11769\ql\ltrch\loch {\f0\fs24\b0\i0  \\item[$\\intn(\\cdot) =$]\{denoting the semantics of an ontology as formulated in \\cref\{def:interpretation-function-for-L_O\}\}}
\par\pard\plain \tx1899\ql\ltrch\loch {\f0\fs24\b0\i0 \\end\{itemize\}}
\par\pard\plain \ql\ltrch\loch {\f0\fs24\b0\i0 \\end\{mmdef\} }
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 It is important to differentiate between the }{\f1\fs24\b0\i1 ontological}{\f0\fs24\b0\i0  relationships such as \loch\af0\hich\af0\dbch\af0\uc1\u8220\'93motherhood\u8221\'94 or \u8220\'93being a vehicle\u8221\'94 defined above, and the }{\f1\fs24\b0\i1 modelling}{\f0\fs24\b0\i0  relationships such as generalisation, instantiation and more. Inspired by [@Henderson-Sellers2012], these are defined as follows:}
\par\pard\plain \ltrch\loch {\f0\fs24\b0\i0  }
\par\pard\plain \ql\ltrch\loch {\f0\fs24\b0\i0 * }{\f2\fs24\b1\i0 Classification}{\f0\fs24\b0\i0 : This relationship, denoted $K$, considers one or more criteria which collectively specify a particular characterisation of entities in the DoI. These criteria form the intensional definition that provides for a mechanism to judge whether a particular belongs to a universal (type). Since the principle of application is based on rules that specify the essential property or properties that are common to instances that belong to a universal, classification provides the principle of application. A particular classification is denoted in logics with the use of by predicates: $\\texttt\{P(x)\} \\Rightarrow  x \\in \\concept\{P\}$, with $\\concept\{P\} = \\intn(\\texttt\{P\}), x = \\intn(\\texttt\{x\})$. Refer to the examples above about *being a vehicle*. The extension of $\\concept\{P\}}{\f3\fs24\b0\i0 $ lists all individual cars. It is possible, even probable, to classify an individual to more than one universal}{\f0\fs24\b0\i0 ;}
\par\plain {\f0\fs24\b0\i0 * }{\f2\fs24\b1\i0 Instantiation}{\f0\fs24\b0\i0 : Also denoted as **instance-of**, **type-of**, **is-a** or **type-instance** relation, instantiation is in its genuine form depicted in \\cref\{fig:}{\f0\fs24\b0\i0\cf1 onto-square-and-sextet}{\f0\fs24\b0\i0 \}. In this ontological context, the individual entails a universal entity that supplies the principle of identity for its instances. The principle of identification is based on rules that define the intrinsic treats that an instance exemplifies when it exists, how that instance is unique and distinct from other instances, and how it should subsequently be identified and referred to in different use contexts. Since the inverse of instantiation maps individuals to a single set, it is very tempting to equate instantiation as the inverse of classification. This would be incorrect, since an individual can be classified in many distinct categories while there is only one ultimate universal that provides the principle of identity to its instances. This notion, mathematically denoted as *non-transitivity*, is highly relevant since it puts the instantiation as a 1:1 relation in between universals and particulars, only. Formulated as a set and its set members, this implies that the instantiation relation relates a set with set member that are individuals only, as opposed to subclasses: `x :: U` $\\Rightarrow \\; \\intn(\\texttt\{x\}) \\in \\concept\{U\} \\, \\land \\, \\intn(\\texttt\{x\}) \\nsubseteq \\concept\{U\}$, where `x :: U` denotes the instantiation relation between (individual) $x$ and (universal) $\\concept\{U\}$. The set $\\concept\{U\} = \\intn(\\texttt\{U\})$ can be defined either intensionally or extensionally;}
\par\plain {\f0\fs24\b0\i0 * }{\f2\fs24\b1\i0 Generalisation / specialisation}{\f0\fs24\b0\i0 : Consider two sets of individuals, $\\concept\{A\}$ and $\\concept\{B\}$. The set $\\concept\{A\}$ is considered a generalisation for set $\\concept\{B\}$ (or $\\concept\{B\}$ a specialisation of $\\concept\{A\}$) if and only if all elements that belong to set $\\concept\{B\}$ also belong to set $\\concept\{A\}$: $\\concept\{B\} \\subseteq \\concept\{A\} \\Rightarrow \\forall x \\in \\concept\{B\}: x \\in \\concept\{A\}$. Where }{\f1\fs24\b0\i1 classification}{\f0\fs24\b0\i0  and }{\f1\fs24\b0\i1 instantiation}{\f0\fs24\b0\i0  relates individuals (particulars) to their type (universals), generalisation/specialisation relates types (universals) to types (universals). When we claim that type `B` is a specialisation of type `C`, represented in linguistic terms `B` $\\sqsubseteq$ `A`, we imply that $\\intn(\\texttt\{B\}) \\, \\subseteq \\, \\intn(\\texttt\{A\})$, which is identical to $\\concept\{B\} \\subseteq \\concept\{A\}$, also called the }{\f1\fs24\b0\i1 subsumption}{\f0\fs24\b0\i0  relation. Additionally, classifications that are defined for the individuals from $\\concept\{B\}$ are applicable to $\\concept\{A\}$ too: $forall x \\in \\concept\{B\}$. Note that the specialisation relation provides for a partitioning rule that specifies at least two disjoint subsets: subset $\\concept\{B\}$ and subset $\\neg \\concept\{B\}$. Moreover, such partitioning is always along one single characteristic, e.g., the breed }{\f1\fs24\b0\i1 or}{\f0\fs24\b0\i0  gender of the individuals and not both. When the domain acknowledges more than one characteristic, e.g., breed and gender, then both partitions (specialisation relations) are to be specified independently from each other. Partitioning also implies a notion on completeness, i.e., $\\concept\{B\}_1 \\cup ... \\cup \\concept\{B\}_n \\equiv \\concept\{A\}$ or not, and pairwise disjointness, i.e., $\\concept\{B\}_i \\cap \\concept\{B\}_k \\equiv \\emptyset$ or not;}
\par\pard\plain \ltrch\loch {\f0\fs24\b0\i0 * }{\f2\fs24\b1\i0 Conformance}{\f0\fs24\b0\i0 : Where the previous relationships exist between elements of one or two models, conformance represents a type of relationship that expresses a relation between two adjacent levels, e.g., a model and its meta-model. Naturally, such relation cannot exist without taking into account the relations between the elements from the model and those from the meta-model. Since a (meta-)model ($M$)$M$ is a compound of tokens $\\token\{e\}_i$, mathematically, that means $\\forall \\token\{e\}_i \\in \\token\{M\} \\; \\exists f \\in MM : T(e_i) = f$, with $T(\\cdot)$ the }{\f1\fs24\b0\i1 classification}{\f0\fs24\b0\i0  relationship;}
\par\pard\plain \ql\ltrch\loch {\f0\fs24\b0\i0 * }{\f2\fs24\b1\i0 Use:}{\f0\fs24\b0\i0  This relation only exists between a model (level) and elements from another model (level). This relation expresses that a model (level) applies an element that has been specified in another model. Mathematically it is only slightly different from the }{\f1\fs24\b0\i1 conformance}{\f0\fs24\b0\i0  relation. Consider two models, $M_a$ and $M_b$, then $M_b$ uses $M_a$, denoted $\\textit\{use\}(M_b, M_a) \\textit\{ iff \} \\, \\exists b \\in M_b \\, \\land \\, a \\in M_a \\to b \\equiv a$. This relation is less strict than the }{\f1\fs24\b0\i1 conformance}{\f0\fs24\b0\i0  relation in the sense that it is not necessary that every element in $M_b$ is used from $M_a$. We however enforce that a token from model $M_b$ is only used from one element from one other model: consider $\\forall b \\in M_b$ and $\\forall \\textit\{use\}(M_b, M_i)$then it follows that $b \\equiv a \\land b \\equiv c \\to \\exists_1 M: a, c \\in M \\land a \\equiv c$ (where $\\exists_1$ denotes *exactly one occurrence*).      }
\par\pard\plain \ltrch\loch \f0\fs24\b0\i0
\par\pard\plain \tx1899\ri-16872\ql\ltrch\loch {\f0\fs24\b0\i0 Now consider a forward looking or system model. As noted in \\cref\{the-nature-of-models\} for such models their truth lies in their meta-models. This implies that their valuation function is significantly different from ontologies, in two ways. Firstly, the valuation function is a relation that can be described as a mapping function between two abstract syntaxes, $f: S_\{L_M\} \\to S_\{L_\{MM\}\}$, where $L_\{MM\}$ is a more abstract formal language that specifies the meta-model and $L_M$ a more detailed formal language. From a semiotic perspective, this is equivalent to linking triangles horizontally. The valuation function for an ontology is part of the interpretation function, where its internal operation is that it performs an interpretation of a theory, determines whether its interpretation belongs to the relevant set, and returns \\token\{T\} if so or \\token\{F\} if not. From a semiotic perspective, this is equivalent to linking triangles vertically.          }
\par\pard\plain \ri-16872\ql\ltrch\loch \f0\fs24\b0\i0
\par\pard\plain \tx720\ri-11769\ql\ltrch\loch {\f0\fs24\b0\i0 We formalise a forward looking or system model as follows.}
\par\pard\plain \ql\ltrch\loch \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 \\begin\{mmdef\}[System model]\\label\{def:system-model\}}
\par\pard\plain \tx1899\ql\ltrch\loch {\f0\fs24\b0\i0 A system model $\\ont\{M\}$ is a structure $\\tuple\{S_\{L_\{\\ont\{M\}\}\}, M\}$, where:}
\par\plain {\f0\fs24\b0\i0 \\begin\{itemize\}[leftmargin=2cm,label=\{\}]}
\par\pard\plain \tx1899\ql\ltrch\loch {\f0\fs24\b0\i0  \\item[$S_\{L_\\ont\{M\}\} =$]\{$\\tuple\{L_\{\\ont\{M\}\}, G_\{\\ont\{M\}\}\}$, denoting the abstract syntax that produces the set of theories $\\phi$ from ontology language $L_\{\\ont\{O\}\}$ (\\cref\{def:ontology-language\}) by grammar $G_\{\\ont\{O\}\}$ (\\cref\{def:grammar-ontologies\})\}}
\par\pard\plain \tx1899\ql\ltrch\loch {\f0\fs24\b0\i0  \\item[$M =$]\{$\\tuple\{C, \\intn(\\cdot)\}$, denoting the intended models for $S_\{L_\{\\ont\{O\}\}\}$\}}
\par\pard\plain \tx1899\ql\ltrch\loch {\f0\fs24\b0\i0  \\item[$C =$]\{the conceptualisation as formulated in \\cref\{enforcing-coherence\}, and\}}
\par\pard\plain \tx720\ri-11769\ql\ltrch\loch {\f0\fs24\b0\i0  \\item[$\\intn(\\cdot) =$]\{denoting the semantics of an ontology as formulated in \\cref\{def:interpretation-function-for-L_O\}\}}
\par\pard\plain \tx1899\ql\ltrch\loch {\f0\fs24\b0\i0 \\end\{itemize\}}
\par\pard\plain \ql\ltrch\loch {\f0\fs24\b0\i0 \\end\{mmdef\}}
\par\plain \f0\fs24\b0\i0
\par\plain {\f0\fs24\b0\i0 Founded on these relations we now formulate in the next two sections (i) how to relate the artifacts within the ASM, and (ii) how to relate ASM with the forward-looking (system) models in the architecture.}
\par\plain \f0\fs24\b0\i0
\par\pard\plain \ltrch\loch {\f0\fs24\b0\i0\cf1 <!-- page additions -->}
\par\pard\plain \ri-10760\ltrch\loch {\f0\fs24\b0\i0\cf1 [def:linkedtriangles]: src\\images\\LinkedTriangles.png \{#fig:linked-triangles width=600px height=230px\}}{\f0\fs24\b0\i0    }}