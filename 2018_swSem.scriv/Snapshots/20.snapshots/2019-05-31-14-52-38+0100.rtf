{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 CourierNewPSMT;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\fet2\ftnbj\aenddoc
\pgnrestart\pgnstarts0
\pard\plain \ltrch\loch {\f0\fs24\b0\i0   *Background:* Access-and-Play semantic interoperability (sIOP) is the next glass ceiling in IT-based business collaboration. Current approaches towards sIOP still rely on conventions on the semantics of the exchanged terms, which can be considered accepted folklore. To break through the ceiling an initial agreement is required on the foundations of semantics and SIOp. Unfortunately, semantics and software are on odds with each other: software can only operate on a token-based machine whereas semantics require an interpretation outside the realm of tokens. This fundamental incompatibility depends for its resolution on the human-in-the-loop. With current artificial intelligence (AI) the fundamental incompatibility cannot be solved. However, the effort of the inevitable human-in-the-loop can be reduced and her position improved. This is a matter of software architecture, and we discuss this in a sequence of two papers. This first paper addresses semantics, and the second addresses semantic interoperability.        }
\par\plain {\f0\fs24\b0\i0   }
\par\plain {\f0\fs24\b0\i0   *Objective:* In this first part of our study, we identify and formulate a fundamental notion on semantics in software, and derive their supporting architectural principles. We provide guidance to their design and integration in contemporary architectural paradigms, with a position of the human-in-the-loop that is reduced and once-only.    }
\par\plain {\f0\fs24\b0\i0   }
\par\plain {\f0\fs24\b0\i0   *Method:* We base our approach on work from disciplines outside ICT, viz. semiotics, pragmatics and linguistic philosophy, and connect that with formal semantics and ontology, meta-modelling, and modelling languages. We investigate the nature of the relation between software semantics and the regular parts of an architecture. We formulate all findings as additional principles and consolidate this notion in distinct and explicit architectural artifacts. We evaluate these principles by designing and formulating an ISO-42010 Architecture Viewpoint and View on software semantics.   }
\par\plain {\f0\fs24\b0\i0   }
\par\plain {\f0\fs24\b0\i0   *Results:* We establish a semiotic and pragmatic explanation on software semantics, and defend the need for an ontological commitment. We argue that semantics in software are reduced to the reciprocity between data and the software code that operates on them and conclude that this reciprocity forms the foundation for the semantic monolith that software agents inevitably represent. By acknowledging this inevitability, measures are taken to its modularisation into explicit atomic elements on the one hand, and their relationship with the system architecture on the other. The resulting ISO-42010 Architecture Viewpoint and View on software semantics consolidate the role and function of semantics in contemporary architectural paradigms as a separate but integrated tangible artifact. Software semantics, then, become the semantic bridgehead from which semantic reusability, reliability, shareability, portability and interoperability emerge as system engineering benefits.  }
\par\plain {\f0\fs24\b0\i0   }
\par\plain {\f0\fs24\b0\i0   *Conclusions:* The introduction of architectural principles on semiotics, pragmatics and ontological commitment provide for the capability to explicitly include and consolidate software semantics in contemporary architectural paradigms. In part 2 we elaborate on the use of this semantic bridgehead to formulate a sIOP-bridge between collaborating software agents.   }
\par\plain \f0\fs24\b0\i0
\par\plain \f0\fs24\b0\i0}