{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 CourierNewPSMT;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\fet2\ftnbj\aenddoc
\pgnrestart\pgnstarts0
\pard\plain \tx1899\ri-9048\ql\ltrch\loch {\f0\fs24\b0\i0 The prime citizens in our architecture are ontologies, models and architectural relations that apply between them. We will characterise them formally, as follows.}
\par\plain \f0\fs24\b0\i0
\par\pard\plain \ri-10760\ltrch\loch {\f0\fs24\b0\i0 ----}
\par\plain \f0\fs24\b0\i0
\par\pard\plain \ltrch\loch {\f0\fs24\b0\i0 Supporting a semantic verification of the system models demands a clear formal characterisation of the relations with their conceptual model. Furthermore, a similar support of the verification of the coherence within the conceptual model demands a similar formal characterisation of the relations between the semantic model, the pragmatic model, their reference model and the foundational ontology that formulates the ontological commitment. These formal characterisations are the subject of this section. To that end we first present the tooling that we require for these formalisations, viz. formal semantics. The use of mathematics is much more accurate than any other language, and, the mathematical language remains consistent over the different models that we address. Together, this facilitates in tracing the semantic consistency throughout the agent.}
\par\pard\plain \tx720\ql\ltrch\loch \f0\fs24\b0\i0
\par\pard\plain \ltrch\loch {\f0\fs24\b0\i0 We consider a formal language $L$ to be nothing more than a set of strings over an alphabet $\\Sigma$. The grammar of the language, denoted $G$, limits the language to a particular subset of all possible strings over $\\Sigma$, called *theories*, and collectively denoted as $T$. This means that a formal grammar is, essentially, a machine that generates its formal language. Any (composition of) symbol(s) from $\\Sigma$ that violates any of the grammatical rules from $G$ is not part of the language $L$. Together, the grammar and the alphabet create a mathematical structure $\\tuple\{\\Sigma, G\}$, denoted the *abstract syntax* of the language.  }
\par\pard\plain \ri-8561\ltrch\loch \f0\fs24\b0\i0
\par\pard\plain \ri-16872\ql\ltrch\loch {\f0\fs24\b0\i0 When we talk about the semantics of a language $L = \\tuple\{\\Sigma, G\}$, we refer to the truth value that can be assigned to a theory $\\lambda \\in L$ that is generated from grammar $G$ over its alphabet $\\Sigma$. Tarski concluded that the truth value of a theory in a language cannot be defined within that same language [@Tarski:1944wr]. Consequently, a representation always needs to consider two languages, the *object* language that one uses to communicate theories, and its higher order *metalanguage* that is used to talk about the truth of theories from the object language. To determine the truth value of a theory, two constructs are required. Firstly, the *interpretation* function can make the transition from the language domain to the metalanguage domain. This function, denoted $\\intn$, will take a theory $\\lambda$ as argument and produces a construct in the metalanguage. In formal semantics, several metalanguages can apply, e.g., petri-nets, but the metalanguage that is usually applied in literature for information modelling is set theory, which we use here as well. Hence, $\\intn : \\Sigma \\to \\EuScript\{D\} \\cup \\EuScript\{R\}$. Here, $\\EuScript\{D\} \\cup \\EuScript\{R\}$ specifies the DoI in set theory by specifying (i) the individuals of interest, denoted $\\EuScript\{D\}$, and (ii) the relations of interest, $\\EuScript\{R\}$. The latter specify those parts of the DoI that are characterised by a number of elements that play a part in the relation, viz. their arity. Relations are used to refer to categories, e.g., the individuals from a subset that are cars (a unary relation), or the marriage between two individuals (a binary relation), or the relation between particular marriages and the individual who closed those marriages (another binary relation), or the class of 1999 (where $n$-ary equals the number of students passing the exams). In other words, any well-formed formula of the language can be extended in set theory. Following the *principle of semantic compositionality*, the interpretation function assigns for every constant symbol in $\\Sigma$ that occurs in $\\lambda$, zero, one or more element(s) in $\\EuScript\{D\}$, and for every $n$-ary predicate symbol in $\\Sigma$ that occurs in $\\lambda$, one or more $n$-ary relation(s) in $\\EuScript\{R\}$, and for every connector that represent operators used by the grammar of the language, e.q., a logical AND, to a set operation, e.g., here conjunction. Note that the definition does not enforce $\\intn(\\cdot)$ to be surjective on $\\EuScript\{D\} \\cup \\EuScript\{R\}$; in fact, it allows for being non-injective as well (elements from $\\EuScript\{D\} \\cup \\EuScript\{R\}$ can be assigned more than one token).}
\par\plain {\f0\fs24\b0\i0 Secondly, a *valuation* function is required, denoted $\\Phi$, which establishes the truth of a metalanguage construct. This is a rather simple function since it only needs to establish whether the individuals and relations that are part of the construct are indeed present in the DoI, $\\EuScript\{D\} \\cup \\EuScript\{R\}$, as suggested by the construct. For instance, if the construct suggests that an individual, e.g., that particular thing of mine that has got four wheels, belongs to a particular subset, e.g., the set of cars, then the valuation function checks whether $c$, representing the subject individual, is part of $C$, representing the subset of cars: $\\Phi(c \\in C) = \\concept\{T\}$ iff $c \\in C$ and $\\concept\{F\}$ otherwise. Note that the valuation function is often deemed implicitly by the interpretation function: $\\intn : L \\to \\EuScript\{D\} \\cup \\EuScript\{R\} \\cup \\domB$.   }
\par\plain \f0\fs24\b0\i0}