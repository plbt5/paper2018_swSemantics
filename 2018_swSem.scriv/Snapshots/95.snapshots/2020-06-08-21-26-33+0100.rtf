{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fmodern\fcharset0\fprq2 CourierNewPSMT;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\fet2\ftnbj\aenddoc
\pgnrestart\pgnstarts0
\pard\plain \ri-17053\ltrch\loch {\f0\fs24\b0\i0 Designing an architecture view requires that the modelling conventions defined by the view\loch\af0\hich\af0\dbch\af0\uc1\u8217\'92s governing viewpoint are followed. Although none of those conventions are actually prescribed by the standard, a view is an engineering artifact and therefore has to be designed according to the best practises in software engineering. Specifically, the fundamental principles of design in software engineering have to be applied, i.e. separation of concerns, high cohesion and low coupling [@Stevens1974;@Parnas1972;@Henderson-Sellers1996].}
\par\plain {\f0\fs24\b0\i0  }
\par\plain {\f0\fs24\b0\i0 A multi-view approach enables the separation of concerns by design and each view expresses the architecture of the system of interest from the perspective of identified stakeholders, to address a set of specific concerns. The first step in assessing that the Domain Model is an architecture view of the system is therefore to identify the stakeholders that have an interest in that view, as well as the concerns that the view addresses. The definition of the Domain Model itself specifies that the main concern addressed by the view is the representation of the real world meaning in the system's concepts, viz. the semantics of the system. The architecture view is therefore named accordingly: the semantic view. }
\par\plain {\f0\fs24\b0\i0  }
\par\plain {\f0\fs24\b0\i0 In order to identify the stakeholders benefiting from the semantic view, we use the key software architecture stakeholder roles described by [@Smolander2002] and asses their interest in the semantic description of the system. The architect (creating the architecture, and therefore creating the semantic view), as well as the designer (implementing the software according to the architecture) are surely the first candidates. The main benefit they get from the semantic view is to bridge the usual gap between reality and software system, aka Business-IT Alignment. The project manager, responsible for specifying the scope of the project, has also interest in the semantic view: whether he applies a classical of agile approach, the semantic view ensures that the work breakdown structure of the project is coherently defined, i.e. that none of the semantic modules are broken into parts. Finally, the semantic view also benefits the C-level in charge of the strategic IT decisions and responsible for the enterprise application landscape, i.e. the CIO. The Domain Model indeed does not change as swift as the technology, and is a stable baseline for the development of the IT strategy. The Domain Model as the semantic view of the system, is therefore at the cross-roads of the major stakeholders' concerns of the organisation: business and IT, strategy and operations. }
\par\plain {\f0\fs24\b0\i0   }
\par\plain {\f0\fs24\b0\i0 The separation of concerns is not only met by addressing the system from multiple views but it is also relevant in the internal design of each view. Considering the 3 architectural aspects of the system is a way to separate the concerns, also from a semantic perspective: the active structure, the passive structure and the behaviour. The \\cref\{dp:comprehension-behaviour\} acknowledges that both the structure (semantic meaning) and the behaviour (pragmatic meaning) are equally important in the Domain Model, and therefore ensures that both concerns are addressed in the semantic view. [enforces the separation between comprehension and behaviour, therefore enabling the separation of structural and behavioural concerns while ensuring both are represented]. Moreover, the \\cref\{dp:comprehension-behaviour\} enforces that the Domain Model includes not only the elements of the passive structure (information and data objects), but also the behaviour (rules and processes) acting on the passive structure for each element of the active structure (the agents of the system), therefore also contributing to high-cohesion in the Domain Model. The \\cref\{dp:reciprocity\} (reciprocity) enforces that both data and data processing are considered together and the \\cref\{dp:semantic-coherence\} (semantic coherence) establishes rules on how to guarantee that the coherence is maintained, therefore enabling high cohesion within the Domain Model. The atomicity principle (\\cref\{dp:atomicity\}) edicts that the scope of the Domain Model in terms of structural and behavioural elements, should be delimited by what is required to represent from the domain of application. It therefore contributes both to the high cohesion and low coupling principles, by enabling the modularity grounded on semantic atomicity.}
\par\plain {\f0\fs24\b0\i0  }
\par\plain {\f0\fs24\b0\i0 The above demonstrates that the fundamental design principles of separation of concerns, high cohesion and low coupling emerge as a direct consequences of applying the design principles, giving the Domain Model the required properties of an architecture view of the system. We however also need to confirm that a viewpoint exists that governs this view, i.e. that there is a set of conventions for constructing, interpreting, using and analysing the semantics view. The design principles will also help us to support this demonstration.}
\par\plain {\f0\fs24\b0\i0  }
\par\plain {\f0\fs24\b0\i0 Let's first acknowledge that ADLs such as ArchiMate only partially support the semantic viewpoint: they provide the required construct to identify the data (passive structure) and the data processing (behaviour), as well as the agent (active structure) assigned to the behaviour. However the language constructs (business and data objects, function and process, actor and role) are not rich enough to actually specify the structural and behavioural aspects of the domain model. They are somehow placeholders for the further specifications of those aspects with a dedicated modelling language. It is quite common for ADLs, considered a higher level modelling language, to be complemented with lower-level language (such as BPMN in the description of business processes). }
\par\plain {\f0\fs24\b0\i0 [Although we are not in a position to formally define *all* components of the semantics viewpoint, viz. model kind, language and notation, modelling method and analytic technique,]}
\par\plain {\f0\fs24\b0\i0 We state that the Domain Model and the associated design principles provides the required Model Kind, language and notation, modelling method and analytic technique, making it the foundation to the specifications of the semantic viewpoint. This viewpoint is the governing viewpoint of the semantic view, and complement the higher-level language such as ArchiMate, enabling it to address the semantic concerns, as follows:}
\par\plain {\f0\fs24\b0\i0 * Especially, the \\cref\{dp:domain-faithfulness\} implies that there exist modelling conventions that enables the faithful representation of the semantics associated with the domain of analysis. According to the standard, this is the definition of a Model Kind, and that design principle therefore implicitly acknowledges that there exists a Model Kind that guides the design of the models pertaining to the semantics view. The Model Kind is addressed in \\cref\{the-nature-of-models\}, where the nature of model indicates that the Domain Model addresses understanding of the system, and as such is a backward-looking model. }
\par\plain {\f0\fs24\b0\i0 * Moreover, the \\cref\{dp:language-appropriateness\}) brings ontological commitment as the foundation for a modelling language and notation associated with this set of modelling conventions. It is the foundation for a language specification dedicated to the design of models belonging to the semantic view.}
\par\plain {\f0\fs24\b0\i0 * By enforcing the services that the domain model should provide, the \\cref\{dp:three-faceted-services\} supports the definition of both modelling approach/method and analytic technique. It indeed introduces rules that are relevant when designing the models belonging to the semantic view: the interface with the data through the CRUD services, as well as services that consider and apply the knowledge that the end user expects the software agent to master in accordance to the particular domain perspective. Moreover, the discipline of ontology engineering (that the Domain Model relies upon) provides the required techniques and approaches to design the Domain Model and to inspect and analyse it.}
\par\plain {\f0\fs24\b0\i0  }
\par\plain {\f0\fs24\b0\i0 The collective design principles are therefore the basis to define all elements of the semantic viewpoint: model kind, modelling language and notation, as well as modelling method and analytic technique.}
\par\plain {\f0\fs24\b0\i0   }
\par\plain {\f0\fs24\b0\i0 We can conclude that collective design principles are the foundational rules to define both the semantics view, as well as its governing viewpoint according to the definition of the standard of architecture description. The view itself is materialised by the Domain Model, and addresses the semantics concerns of the system\loch\af0\hich\af0\dbch\af0\uc1\u8217\'92s stakeholders;  the governing viewpoint specifies the rules to describe the view through the application of the ASM's design principles. }
\par\pard\plain \ri-17053\ql\ltrch\loch {\f0\fs24\b0\i0 The authors of [@Bouck2008] focus on the relations between architectural views and conclude these to be essential for establishing architectural consistency and for maintaining that consistency over time. To that end they have defined several criteria that characterise relations between views. }{\field{\*\fldinst HYPERLINK "scrivcmt://AB245D48-AF2E-40C9-818E-57DA271220D3"}{\fldrslt\f0\fs24\b0\i0 We refer to their publication for the definition of the criteria}}{\f0\fs24\b0\i0 , and conclude that our proposed token and model *Grounding* relations, \\cref\{def:model-grounding,def:token-grounding\}, contribute to the criteria on *consistency checking*, *composition*, and represents an *inter-* as opposed to an intra-model type relation, a *horizontal* relation that relates *models*, and more specifically, uses a *tuple* construct over elements between models, where:}
\par\pard\plain \ri-17053\ltrch\loch {\f0\fs24\b0\i0 ----------------------------------------------------------------------------------------------------------------------------------}
\par\plain {\f0\fs24\b0\i0 Characteristic       Definition (adapted from \\cite\{Bouck2008\})            Relation between ASM and other views}
\par\plain {\f0\fs24\b0\i0 -------------------- ----------------------------------------------------- -------------------------------------------------------}
\par\plain {\f0\fs24\b0\i0 **Consistency**      The information in several views does not             By definition, the *Use* relation enforces alignment }
\par\plain {\f0\fs24\b0\i0                      conflict.                                             between related models. Hence, information about the }
\par\plain {\f0\fs24\b0\i0                                                                            DoA cannot conflict with information from other views.}
\par\pard\plain \ri-16974\ltrch\loch {\f0\fs24\b0\i0 $\\;$}
\par\pard\plain \ri-17053\ltrch\loch {\f0\fs24\b0\i0 **View composition** Allow for integration of information from             The *Grounding* relation is $1:n$, implying that several   }
\par\plain {\f0\fs24\b0\i0 (a.k.a. \loch\af0\hich\af0\dbch\af0\uc1\u8220\'93merging\u8221\'94 or several views.                                        models can apply the same elements from the Domain }
\par\pard\plain \ri-17053\ql\ltrch\loch {\f0\fs24\b0\i0 \loch\af0\hich\af0\dbch\af0\uc1\u8220\'93integration\u8221\'94 of                                                           Model. }
\par\plain {\f0\fs24\b0\i0 views)}
\par\pard\plain \ri-16974\ltrch\loch {\f0\fs24\b0\i0 $\\;$}
\par\pard\plain \ri-17053\ltrch\loch {\f0\fs24\b0\i0 **Relation type**    Inter model type relations involve models of          Inter model type only. }
\par\plain {\f0\fs24\b0\i0                      different types, whereas intra model type}
\par\plain {\f0\fs24\b0\i0                      relations allow for relations between models}
\par\plain {\f0\fs24\b0\i0                      of identical type.}
\par\pard\plain \ri-16974\ltrch\loch {\f0\fs24\b0\i0 $\\;$}
\par\pard\plain \ri-17053\ltrch\loch {\f0\fs24\b0\i0 **Level of Detail**  Relations can be described between complete           tbd }
\par\plain {\f0\fs24\b0\i0                      views, between models, or between architectural}
\par\plain {\f0\fs24\b0\i0                      elements inside views.}
\par\pard\plain \ri-16974\ltrch\loch {\f0\fs24\b0\i0 $\\;$}
\par\pard\plain \ri-17053\ltrch\loch {\f0\fs24\b0\i0 **Horizontal vs.     The term *horizontal* is used for relations           tbd      }
\par\plain {\f0\fs24\b0\i0 Vertical Relations** between views at the same level of abstraction;  }
\par\plain {\f0\fs24\b0\i0                      *vertical* relations are either relations between  }
\par\plain {\f0\fs24\b0\i0                      views at different levels of abstraction, e.g.,}
\par\plain {\f0\fs24\b0\i0                      refinements or relations with other }
\par\plain {\f0\fs24\b0\i0                      representations.}
\par\pard\plain \ri-16974\ltrch\loch {\f0\fs24\b0\i0 $\\;$}
\par\pard\plain \ri-17053\ltrch\loch {\f0\fs24\b0\i0 **Model vs.          View relations are stated with reference to a         tbd}
\par\plain {\f0\fs24\b0\i0  Metamodel**         metamodel or between either models or metamodels.  }
\par\pard\plain \ri-16974\ltrch\loch {\f0\fs24\b0\i0 $\\;$}
\par\pard\plain \ri-17053\ltrch\loch {\f0\fs24\b0\i0 **Tuple constructs** Realise the relation as instances of the              tbd }
\par\plain {\f0\fs24\b0\i0                      cartesian product between the two related models. }
\par\plain {\f0\fs24\b0\i0                      Other constructs that are used to realise the }
\par\plain {\f0\fs24\b0\i0                      relation are *direct references* and }
\par\plain {\f0\fs24\b0\i0                      *expression language*, but not here.}
\par\plain {\f0\fs24\b0\i0 ----------------------------------------------------------------------------------------------------------------------------------}
\par\plain \f0\fs24\b0\i0}