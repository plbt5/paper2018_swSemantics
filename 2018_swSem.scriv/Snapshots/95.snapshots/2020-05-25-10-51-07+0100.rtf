{\rtf1\ansi\ansicpg1252\uc1\deff0
{\fonttbl{\f0\fnil\fcharset0\fprq2 MS Shell Dlg 2;}{\f1\fmodern\fcharset0\fprq2 CourierNewPSMT;}}
{\colortbl;\red0\green0\blue0;\red255\green255\blue255;}
\paperw12240\paperh15840\margl1800\margr1800\margt1440\margb1440\fet2\ftnbj\aenddoc
\pgnrestart\pgnstarts0
\pard\plain \ri-17053\ltrch\loch {\f1\fs24\b0\i0 Designing an architecture view requires that the modelling conventions defined by the view\loch\af1\hich\af1\dbch\af1\uc1\u8217\'92s governing viewpoint are followed. Although none of those conventions are actually prescribed by the standard, a view is an engineering artefact and therefore has to be designed according to the best practices in software engineering. Specifically, the fundamental principles of design in software engineering have to be applied, i.e. separation of concerns, high cohesion and low coupling [Ref to Edsgar Dijkstra ?]. }
\par\plain {\f1\fs24\b0\i0 A multi-view approach enables the separation of concerns by design and each view expresses the architecture of the system of interest from the perspective of identified stakeholders, to address a set of specific concerns. The first step in assessing that the ASM is an architecture view of the system is therefore to identify those stakeholders as well as their concerns. The definition of the ASM itself helps us to understand that the main concern addressed is the translation and the explanation of the real world meaning in the system's concepts, i.e. the semantics of the system. }
\par\pard\plain \ri-17053\ltrch\loch {\f1\fs24\b0\i0 [NOTE: integrate elements of definition of ASM]}
\par\pard\plain \ri-17053\ltrch\loch {\f1\fs24\b0\i0  }
\par\pard\plain \ri-17053\ltrch\loch {\f1\fs24\b0\i0 In system\loch\af1\hich\af1\dbch\af1\uc1\u8217\'92s architecture and engineering, the management of semantics is usually endorsed by the data architect, the ontology engineer, \u8230\'85 They are the stakeholders benefiting from this specific view. }
\par\pard\plain \ri-17053\ltrch\loch {\f1\fs24\b0\i0 The principle of separation of concerns is also applied within the design of the view, according to the 3 architectural aspects of the system: the active structure, the passive structure and the behaviour. The ASM enforces the separation between comprehension and behaviour (principle 2.1) but also the cohesion (principle 2.2) as well as the coherence (principle 2.4) between data and data processing (principle 2.2). In other words, the ASM includes not only the elements of the passive structure (information and data objects), but also the behaviour (rules and processes) acting on the passive structure for each element of the active structure (the agents of the system). The ASM therefore enables separation of structural and behaviour concerns by design, while considering they are both necessary to be part of the view. }
\par\pard\plain \ri-17053\ltrch\loch {\f1\fs24\b0\i0 The fundamental design principles of high cohesion and low coupling are direct consequences of the ASM design principles: }
\par\pard\plain \ri-17053\ltrch\loch {\f1\fs24\b0\i0 The principle 2.1 (separate comprehension from behaviour) ensures that both aspects are represented, although clearly separated. The principle 2.2 (semantic reciprocity) enforces that both data and data processing are considered together. The principle 2.4 (semantic coherence) establishes rules on how to guarantee that the coherence is maintained. The atomicity principle (principle 2.2) edicts that the scope of the ASM in terms of structural elements, should be delimited by what is required to express a semantic domain. }
\par\plain {\f1\fs24\b0\i0 We have demonstrated that the ASM addresses the semantics concerns of specific stakeholders, and that its design principles conform to the fundamental principles of system and software engineering. Before stating that the ASM is an architecture view of the system, we also need to confirm that we can identify a viewpoint that governs this view, as a set of conventions for constructing, interpreting, using and analyzing the semantics view. The design principles associated with the ASM will also help us to support this demonstration: although we are not in a position to formally define yet the components of the semantics viewpoint (model kind, language and notation, modelling method and analytic technique), we can state that the ASM design principles are the foundation to the specifications of the semantics viewpoint. Especially, the language appropriateness (principle 3.1) and domain appropriateness (principle 3.2) [NOTE: complete]}
\par\pard\plain \ri-17053\ltrch\loch {\f1\fs24\b0\i0 We can conclude that the ASM together with its design principles are the foundational rules to define both the semantics view, as well as its governing viewpoint according to the definition of the standard of architecture description. The view addresses the semantics concerns of the system\loch\af1\hich\af1\dbch\af1\uc1\u8217\'92s stakeholders, while the governing viewpoint specifies the rules to describe the view. }
\par\pard\plain \ri-17053\ltrch\loch {\f1\fs24\b0\i0  }
\par\pard\plain \ri-17053\ltrch\loch {\f1\fs24\b0\i0 ADLs such as ArchiMate only partially support the ASM viewpoint: they provide the required construct to identify the data (passive structure) and the data processing (behaviour), as well as the agent (active structure) assigned to the behaviour. They however lack the support for actual semantic description. It is quite common for ADLs, to be considered a higher level modelling language, and to be complemented with lower-level language (such as BPMN in the description of business processes). \\Cref\{dp:language-appropriateness-principle\} brings ontological commitment as the foundation for language appropriateness. We consider this as the bed for a language specification dedicated to the design of models belonging to the semantic view. It is the model kind that the ISO42010 standard defines as part of the definition of a viewpoint, which captures the conventions for a type of modelling: it requires that the models belonging to a view are expressed in a modelling language specified in the governing viewpoint. The language appropriateness principle therefore even strengthens the definition of a viewpoint according to the standard, and the ASM defines a viewpoint, but also provides with the requirements for the language supporting the description of a view according to the governing viewpoint. }
\par\pard\plain \ri-17053\ql\ltrch\loch {\f1\fs24\b0\i0 The authors of [@Bouck2008] focus on the relations between architectural views and conclude these to be essential for establishing architectural consistency and for maintaining that consistency over time. To that end they have defined several criteria that characterise relations between views. }{\field{\*\fldinst HYPERLINK "scrivcmt://D2F281F6-C1FB-45A9-B266-EDE8695766CA"}{\fldrslt\f1\fs24\b0\i0 We refer to their publication for the definition of the criteria, and conclude that our proposed *Use* relation contributes to the criteria on *consistency checking*, *composition*, and represents an *inter-* as opposed to an intra-model type relation, a *horizontal* relation that relates *models*, and more specifically, uses a *tuple* construct over elements between models, where:}}
\par\pard\plain \ri-16974\ql\ltrch\loch {\f1\fs24\b0\i0 --------------------------------------------------------------------------------------------------------------------------------}
\par\pard\plain \ri-17053\ql\ltrch\loch {\f1\fs24\b0\i0 Characteristic       Definition (adapted from \\cite\{Bouck2008\})            Relation between ASM and other views}
\par\pard\plain \ri-16974\ql\ltrch\loch {\f1\fs24\b0\i0 -------------------- ----------------------------------------------------- -----------------------------------------------------}
\par\pard\plain \ri-17053\ql\ltrch\loch {\f1\fs24\b0\i0 **Consistency**      The information in several views does not             By definition, the *Use* relation enforces alignment }
\par\plain {\f1\fs24\b0\i0                      conflict.                                             between related models. Hence, information about the }
\par\plain {\f1\fs24\b0\i0                                                                            DoA cannot conflict with information from other views                               }
\par\pard\plain \ri-16974\ltrch\loch {\f1\fs24\b0\i0 $\\;$}
\par\pard\plain \ri-17053\ql\ltrch\loch {\f1\fs24\b0\i0 **View composition** Allow for integration of information from             The *Use* relation is $1:n$, implying that several   }
\par\plain {\f1\fs24\b0\i0 (a.k.a. \loch\af1\hich\af1\dbch\af1\uc1\u8220\'93merging\u8221\'94 or several views.                                        models can apply the same elements from the ASM. }
\par\plain {\f1\fs24\b0\i0 \loch\af1\hich\af1\dbch\af1\uc1\u8220\'93integration\u8221\'94 of }
\par\plain {\f1\fs24\b0\i0 views)      }
\par\pard\plain \ri-16974\ltrch\loch {\f1\fs24\b0\i0 $\\;$}
\par\pard\plain \ri-17053\ql\ltrch\loch {\f1\fs24\b0\i0 **Relation type**    Inter model type relations involve models of          Inter model type only }
\par\plain {\f1\fs24\b0\i0                      different types, whereas intra model type}
\par\plain {\f1\fs24\b0\i0                      relations allow for relations between models}
\par\plain {\f1\fs24\b0\i0                      of identical type.}
\par\pard\plain \ri-16974\ltrch\loch {\f1\fs24\b0\i0 $\\;$}
\par\pard\plain \ri-17053\ql\ltrch\loch {\f1\fs24\b0\i0 **Level of Detail**  Relations can be described between complete           tbd }
\par\plain {\f1\fs24\b0\i0                      views, between models, or between architectural}
\par\plain {\f1\fs24\b0\i0                      elements inside views.}
\par\pard\plain \ri-16974\ltrch\loch {\f1\fs24\b0\i0 $\\;$}
\par\pard\plain \ltrch\loch {\f1\fs24\b0\i0 **Horizontal vs.     The term *horizontal* is used for relations           tbd      }
\par\plain {\f1\fs24\b0\i0 Vertical Relations** between views at the same level of abstraction;  }
\par\plain {\f1\fs24\b0\i0                      *vertical* relations are either relations between  }
\par\plain {\f1\fs24\b0\i0                      views at different levels of abstraction, e.g.,}
\par\plain {\f1\fs24\b0\i0                      refinements or relations with other }
\par\plain {\f1\fs24\b0\i0                      representations.}
\par\pard\plain \ri-16974\ltrch\loch {\f1\fs24\b0\i0 $\\;$}
\par\pard\plain \ri-17053\ql\ltrch\loch {\f1\fs24\b0\i0 **Model vs.          View relations are stated with reference to a         tbd}
\par\plain {\f1\fs24\b0\i0  Metamodel**         metamodel or between either models or metamodels.  }
\par\pard\plain \ri-16974\ltrch\loch {\f1\fs24\b0\i0 $\\;$}
\par\pard\plain \ri-17053\ql\ltrch\loch {\f1\fs24\b0\i0 **Tuple constructs** Realise the relation as instances of the              tbd }
\par\plain {\f1\fs24\b0\i0                      cartesian product between the two related models. }
\par\plain {\f1\fs24\b0\i0                      Other constructs that are used to realise the }
\par\plain {\f1\fs24\b0\i0                      relation are *direct references* and }
\par\plain {\f1\fs24\b0\i0                      *expression language*, but not here.}
\par\pard\plain \ri-16974\ql\ltrch\loch {\f1\fs24\b0\i0 --------------------------------------------------------------------------------------------------------------------------------}
\par\pard\plain \ri-17053\ltrch\loch \f1\fs24\b0\i0}